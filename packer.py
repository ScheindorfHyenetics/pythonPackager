#!/usr/bin/python3.4
# -*- coding: utf8 -*-

import sys
import argparse
import functools

if not hasattr(__builtins__,'reduce'): reduce = functools.reduce

parser = argparse.ArgumentParser(description='generate a python script containing compressed base64 version of mentioned files, followed by a deflating script')
parser.add_argument('--packmodule','-I', dest='packmods', type=str, action="append", choices=("backports.lzma","ecdsa"), default=[],
                   help='package this module along generated python script and import it as fallback')
parser.add_argument('--nointegrity','-H', dest='integrity', action="store_const", default=True, const=False,
                   help='desactivate attempt to include secure hash of packed files and checking in unpacker')
parser.add_argument('--hashname','-S', dest='hashname', type=str, action="store", choices=("hashlib.sha512",), default="hashlib.sha512", help='secure hash algorithm to attempt to use for integrity checking')
parser.add_argument('--compression','-z', dest='compressor', type=str, action="store", choices=("lzma","gzip"), default="lzma", help='compression algorithm to use for deflating files')
parser.add_argument('--ecdsasign','-e', dest='ecdsasign', action="store_const", default=False, const=True,
                   help='activate attempt to create/load ecdsa key and sign header+packaged datas with it\nPEM of key is output on stderr')
parser.add_argument('--ecdsaprivkey','-k', dest='ecdsaprivkey', type=str, action="store", default=None, help='private ecdsa key to use for signature, a new one is generated if no specified')
parser.add_argument('header', metavar='"header text file"', type=str, nargs=1, help='file containing text displayed as header when using unpacker without arguments')
parser.add_argument('packedfiles', metavar='"packed file"', type=str, nargs='+',
                   help='a file to include in the package')
args = parser.parse_args()

ecdsasign = False #Not yet implemented, will use pyecdsa https://pypi.python.org/pypi/ecdsa

if args.ecdsasign == True:
    sys.stderr.write("Warning : ecdsa is not yet implemented, this flag does nothing yet\n")
    try:
        import ecdsa
        if not hasattr(ecdsa,'SigningKey'):
            raise ImportError('no SigningKey submodule in your ecdsa... weird, aborting')
        ecdsasign = True
        ecdsaprivkey = args.ecdsaprivkey
        #sanity check ecdsa and optional privkey later#
    except ImportError as e: 
        sys.stderr.write("Warning : ecdsa could not be imported, deactivating it.\n")
        sys.stderr.write("          check that you have installed module from https://pypi.python.org/pypi/ecdsa\n")
        sys.stderr.write("  Error was: %s \n" % repr(e))
        ecdsasign = False

integrity = args.integrity
if integrity == True:
    hashname = args.hashname
    #sanity check hashing function later#
else:
    sys.stderr.write("Hash computation volontarily disabled\n")

modstopack = set(reduce(lambda x,y: x+y,map(lambda x: {'backports.lzma':('xlzma','xlzma._lzma'),'ecdsa':tuple()}[x],args.packmods),tuple()))

headerpath = args.header.pop()
filestopack = args.packedfiles

sys.stderr.write("Warning : files are read through read(), be sure to have enough free memory\n")

import base64
import os
import re

base64encode = (hasattr(base64,'encodebytes') and base64.encodebytes) or (hasattr(base64,'encodestring') and base64.encodestring)
base64decode = (hasattr(base64,'decodebytes') and base64.decodebytes) or (hasattr(base64,'decodestring') and base64.decodestring)

###deviation content %1###
###packaged backports.lzma module###
pkmodules={'xlzma._lzma':'''f0VMRgIBAQAAAAAAAAAAAAMAPgABAAAAYCIAAAAAAABAAAAAAAAAAEilAAAAAAAAAAAAAEAAOAAH
AEAAGwAYAAEAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFF4AAAAAAAAUXgAAAAAAAAAA
IAAAAAAAAQAAAAYAAACYbQAAAAAAAJhtIAAAAAAAmG0gAAAAAAAwGwAAAAAAAFAbAAAAAAAAAAAg
AAAAAAACAAAABgAAALBtAAAAAAAAsG0gAAAAAACwbSAAAAAAAPABAAAAAAAA8AEAAAAAAAAIAAAA
AAAAAFDldGQEAAAAOFgAAAAAAAA4WAAAAAAAADhYAAAAAAAALAEAAAAAAAAsAQAAAAAAAAQAAAAA
AAAAUeV0ZAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAA
AABS5XRkBAAAAJhtAAAAAAAAmG0gAAAAAACYbSAAAAAAAGgCAAAAAAAAaAIAAAAAAAABAAAAAAAA
AIAVBGUAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAA
EQAAAEoAAAABAAAABgAAAIrQIBESBFAJAAAAAEoAAABLAAAATAAAAE4AAAAAAAAAAAAAAE8AAAAA
AAAAAAAAAAAAAABQAAAAUQAAAAAAAABSAAAAAAAAAAAAAADr0+8OuY3xDnTo5hTZcVgcu+OSfENF
1ewBGfgJGVb0qA0XnuUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAIAEAeAAAAAAAAAAAA
AAAAAACIAwAAEgAAAAAAAAAAAAAAAAAAAAAAAADYAgAAEgAAAAAAAAAAAAAAAAAAAAAAAACzAAAA
EgAAAAAAAAAAAAAAAAAAAAAAAAD8BAAAEgAAAAAAAAAAAAAAAAAAAAAAAACRBAAAEgAAAAAAAAAA
AAAAAAAAAAAAAABQBQAAEgAAAAAAAAAAAAAAAAAAAAAAAABqBAAAEgAAAAAAAAAAAAAAAAAAAAAA
AAAcAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAB5AgAAEgAAAAAAAAAAAAAAAAAAAAAAAABwAQAAEgAA
AAAAAAAAAAAAAAAAAAAAAABfAQAAEgAAAAAAAAAAAAAAAAAAAAAAAAAPAwAAEgAAAAAAAAAAAAAA
AAAAAAAAAAApAgAAEgAAAAAAAAAAAAAAAAAAAAAAAAC8AgAAEgAAAAAAAAAAAAAAAAAAAAAAAABo
AwAAEgAAAAAAAAAAAAAAAAAAAAAAAAB9AQAAEgAAAAAAAAAAAAAAAAAAAAAAAAA+BQAAEgAAAAAA
AAAAAAAAAAAAAAAAAADtAAAAEgAAAAAAAAAAAAAAAAAAAAAAAADBAwAAEgAAAAAAAAAAAAAAAAAA
AAAAAABDAQAAEgAAAAAAAAAAAAAAAAAAAAAAAAA8AwAAEgAAAAAAAAAAAAAAAAAAAAAAAABoAgAA
EgAAAAAAAAAAAAAAAAAAAAAAAADpAwAAEQAAAAAAAAAAAAAAAAAAAAAAAAAzAQAAEgAAAAAAAAAA
AAAAAAAAAAAAAACuAwAAEgAAAAAAAAAAAAAAAAAAAAAAAAC6AQAAEgAAAAAAAAAAAAAAAAAAAAAA
AABXAgAAEQAAAAAAAAAAAAAAAAAAAAAAAACJAgAAEQAAAAAAAAAAAAAAAAAAAAAAAAAXBAAAEgAA
AAAAAAAAAAAAAAAAAAAAAAAEAQAAEgAAAAAAAAAAAAAAAAAAAAAAAAARAgAAEgAAAAAAAAAAAAAA
AAAAAAAAAADhAQAAEgAAAAAAAAAAAAAAAAAAAAAAAACpAgAAEgAAAAAAAAAAAAAAAAAAAAAAAADl
BAAAEgAAAAAAAAAAAAAAAAAAAAAAAABoBQAAEgAAAAAAAAAAAAAAAAAAAAAAAACZAgAAEgAAAAAA
AAAAAAAAAAAAAAAAAADIAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAD4AQAAEgAAAAAAAAAAAAAAAAAA
AAAAAACpBAAAEgAAAAAAAAAAAAAAAAAAAAAAAADSAQAAEQAAAAAAAAAAAAAAAAAAAAAAAAABAAAA
IAAAAAAAAAAAAAAAAAAAAAAAAAAyBQAAEgAAAAAAAAAAAAAAAAAAAAAAAACmAQAAEQAAAAAAAAAA
AAAAAAAAAAAAAACXAQAAEgAAAAAAAAAAAAAAAAAAAAAAAAA4BAAAEQAAAAAAAAAAAAAAAAAAAAAA
AAAOBAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAkAwAAEgAAAAAAAAAAAAAAAAAAAAAAAAApBAAAEgAA
AAAAAAAAAAAAAAAAAAAAAAB5AwAAEQAAAAAAAAAAAAAAAAAAAAAAAAC5BAAAEgAAAAAAAAAAAAAA
AAAAAAAAAADSAwAAEgAAAAAAAAAAAAAAAAAAAAAAAAA0AgAAEgAAAAAAAAAAAAAAAAAAAAAAAABS
AwAAEgAAAAAAAAAAAAAAAAAAAAAAAABHBAAAEgAAAAAAAAAAAAAAAAAAAAAAAACPAAAAEgAAAAAA
AAAAAAAAAAAAAAAAAADOBAAAEgAAAAAAAAAAAAAAAAAAAAAAAAB+BAAAEgAAAAAAAAAAAAAAAAAA
AAAAAAAYAgAAEgAAAAAAAAAAAAAAAAAAAAAAAADzAgAAEgAAAAAAAAAAAAAAAAAAAAAAAAAVBQAA
EgAAAAAAAAAAAAAAAAAAAAAAAABhAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAkAQAAEgAAAAAAAAAA
AAAAAAAAAAAAAABYBAAAEgAAAAAAAAAAAAAAAAAAAAAAAACaAwAAEgAAAAAAAAAAAAAAAAAAAAAA
AAAFAwAAEgAAAAAAAAAAAAAAAAAAAAAAAABSAQAAEgAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAIAAA
AAAAAAAAAAAAAAAAAAAAAAABBQAAEgAAAAAAAAAAAAAAAAAAAAAAAACaAAAAEgAAAAAAAAAAAAAA
AAAAAAAAAAAEAgAAEgAAAAAAAAAAAAAAAAAAAAAAAABSAAAAIgAAAAAAAAAAAAAAAAAAAAAAAAD7
AwAAEgAAAAAAAAAAAAAAAAAAAAAAAAAWAAAAEgALANhPAAAAAAAAAAAAAAAAAAAQAAAAEgAIAEAe
AAAAAAAAAAAAAAAAAADbAAAAEgAKAIEkAAAAAAAAiwAAAAAAAAC3BQAAEAAWAMiIIAAAAAAAAAAA
AAAAAAASBAAAEAAWAOiIIAAAAAAAAAAAAAAAAACwBQAAEAAVAMiIIAAAAAAAAAAAAAAAAAB1AAAA
EgAKAGAjAAAAAAAAIQEAAAAAAAASAQAAEgAKAAwlAAAAAAAASwAAAAAAAAAoBQAAEgAKAPNKAAAA
AAAA5AQAAAAAAAAAX19nbW9uX3N0YXJ0X18AX2luaXQAX2ZpbmkAX0lUTV9kZXJlZ2lzdGVyVE1D
bG9uZVRhYmxlAF9JVE1fcmVnaXN0ZXJUTUNsb25lVGFibGUAX19jeGFfZmluYWxpemUAX0p2X1Jl
Z2lzdGVyQ2xhc3NlcwBQeUVycl9OZXdFeGNlcHRpb25XaXRoRG9jAFB5RGljdF9OZXcAUHlVbmlj
b2RlVUNTNF9Gcm9tU3RyaW5nAFB5RGljdF9TZXRJdGVtU3RyaW5nAFB5RXJyX05ld0V4Y2VwdGlv
bgBfUHlVbmljb2RlX0Zyb21JZABQeVN0cmluZ19JbnRlcm5JblBsYWNlAF9fYXNzZXJ0X2ZhaWwA
X1B5RGljdF9TZXRJdGVtSWQAUHlEaWN0X1NldEl0ZW0AUHlFcnJfU2V0U3RyaW5nAFB5RXJyX05v
TWVtb3J5AFB5RXJyX0Zvcm1hdABfUHlTdHJpbmdfUmVzaXplAFB5SW50X0FzTG9uZwBQeUxvbmdf
QXNVbnNpZ25lZExvbmdMb25nAFB5RXJyX09jY3VycmVkAFB5RXhjX092ZXJmbG93RXJyb3IAUHlN
YXBwaW5nX0dldEl0ZW1TdHJpbmcAUHlFeGNfS2V5RXJyb3IAUHlFcnJfRXhjZXB0aW9uTWF0Y2hl
cwBQeUVycl9DbGVhcgBQeU1lbV9NYWxsb2MAbWVtc2V0AGx6bWFfbHptYV9wcmVzZXQAUHlNZW1f
RnJlZQBfUHlBcmdfUGFyc2VUdXBsZUFuZEtleXdvcmRzX1NpemVUAFB5RXhjX1ZhbHVlRXJyb3IA
X19zdGFja19jaGtfZmFpbABQeU1hcHBpbmdfQ2hlY2sAUHlFeGNfVHlwZUVycm9yAFB5U2VxdWVu
Y2VfU2l6ZQBQeVNlcXVlbmNlX0dldEl0ZW0AUHlMb25nX0Zyb21VbnNpZ25lZExvbmdMb25nAFB5
U3RyaW5nX0Zyb21TdHJpbmdBbmRTaXplAFB5RXZhbF9TYXZlVGhyZWFkAGx6bWFfY29kZQBQeUV2
YWxfUmVzdG9yZVRocmVhZABfUHlBcmdfUGFyc2VUdXBsZV9TaXplVABQeVRocmVhZF9hY3F1aXJl
X2xvY2sAUHlUaHJlYWRfcmVsZWFzZV9sb2NrAFB5QnVmZmVyX1JlbGVhc2UAX1B5X05vbmVTdHJ1
Y3QAbHptYV9lYXN5X2VuY29kZXIAbHptYV9zdHJlYW1fZW5jb2RlcgBsem1hX2Fsb25lX2VuY29k
ZXIAbHptYV9yYXdfZW5jb2RlcgBQeVRocmVhZF9hbGxvY2F0ZV9sb2NrAFB5RXhjX01lbW9yeUVy
cm9yAFB5VGhyZWFkX2ZyZWVfbG9jawBsem1hX2VuZABQeVR5cGVfR2VuZXJpY05ldwBsem1hX2dl
dF9jaGVjawBQeUV4Y19FT0ZFcnJvcgBsem1hX3Jhd19kZWNvZGVyAGx6bWFfYXV0b19kZWNvZGVy
AGx6bWFfc3RyZWFtX2RlY29kZXIAbHptYV9hbG9uZV9kZWNvZGVyAGx6bWFfY2hlY2tfaXNfc3Vw
cG9ydGVkAFB5Qm9vbF9Gcm9tTG9uZwBsem1hX3Byb3BlcnRpZXNfc2l6ZQBsem1hX3Byb3BlcnRp
ZXNfZW5jb2RlAGx6bWFfcHJvcGVydGllc19kZWNvZGUAZnJlZQBQeUxvbmdfRnJvbUxvbmdMb25n
AFB5TW9kdWxlX0FkZE9iamVjdABpbml0X2x6bWEAUHlUdXBsZV9OZXcAUHlfSW5pdE1vZHVsZTRf
NjQAUHlNb2R1bGVfQWRkSW50Q29uc3RhbnQAUHlUeXBlX1JlYWR5AGxpYmx6bWEuc28uNQBsaWJw
eXRob24yLjcuc28uMS4wAGxpYnB0aHJlYWQuc28uMABsaWJjLnNvLjYAX2VkYXRhAF9fYnNzX3N0
YXJ0AEdMSUJDXzIuNABHTElCQ18yLjIuNQAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAACAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AgAAAAEAAQABAAEAAQABAAEAAQABAAEAAgCmBQAAEAAAAAAAAAAUaWkNAAADAMMFAAAQAAAAdRpp
CQAAAgDNBQAAAAAAAJhtIAAAAAAACAAAAAAAAAAwIwAAAAAAAKBtIAAAAAAACAAAAAAAAADwIgAA
AAAAAEByIAAAAAAACAAAAAAAAABAciAAAAAAAICBIAAAAAAACAAAAAAAAACZVAAAAAAAAIiBIAAA
AAAACAAAAAAAAABVNgAAAAAAAJiBIAAAAAAACAAAAAAAAACAciAAAAAAAKCBIAAAAAAACAAAAAAA
AACiVAAAAAAAAKiBIAAAAAAACAAAAAAAAACMNwAAAAAAALiBIAAAAAAACAAAAAAAAACAcyAAAAAA
AACCIAAAAAAACAAAAAAAAABeVQAAAAAAAAiCIAAAAAAACAAAAAAAAAAMQQAAAAAAABiCIAAAAAAA
CAAAAAAAAABAeSAAAAAAAECCIAAAAAAACAAAAAAAAABpVQAAAAAAAGCCIAAAAAAACAAAAAAAAACg
eiAAAAAAAGiCIAAAAAAACAAAAAAAAABvVQAAAAAAAIiCIAAAAAAACAAAAAAAAADgeiAAAAAAAJCC
IAAAAAAACAAAAAAAAABzVQAAAAAAALCCIAAAAAAACAAAAAAAAAAgeyAAAAAAAACDIAAAAAAACAAA
AAAAAADnVQAAAAAAAAiDIAAAAAAACAAAAAAAAACvRwAAAAAAABiDIAAAAAAACAAAAAAAAAAAfyAA
AAAAACCDIAAAAAAACAAAAAAAAAD6VQAAAAAAACiDIAAAAAAACAAAAAAAAAAgSAAAAAAAADiDIAAA
AAAACAAAAAAAAADAfyAAAAAAAECDIAAAAAAACAAAAAAAAAAUVgAAAAAAAEiDIAAAAAAACAAAAAAA
AAB1SQAAAAAAAFiDIAAAAAAACAAAAAAAAADAgCAAAAAAAICDIAAAAAAACAAAAAAAAAC0UgAAAAAA
AIiDIAAAAAAACAAAAAAAAACzUQAAAAAAAJCDIAAAAAAACAAAAAAAAADiVwAAAAAAAJiDIAAAAAAA
CAAAAAAAAADsVwAAAAAAAKCDIAAAAAAACAAAAAAAAADvVwAAAAAAAKiDIAAAAAAACAAAAAAAAADy
VwAAAAAAALCDIAAAAAAACAAAAAAAAAD1VwAAAAAAALiDIAAAAAAACAAAAAAAAAD6VwAAAAAAAMCD
IAAAAAAACAAAAAAAAAADWAAAAAAAAMiDIAAAAAAACAAAAAAAAAAGWAAAAAAAAOCDIAAAAAAACAAA
AAAAAAC0UgAAAAAAAOiDIAAAAAAACAAAAAAAAAAMWAAAAAAAAACEIAAAAAAACAAAAAAAAAC0UgAA
AAAAAAiEIAAAAAAACAAAAAAAAAARWAAAAAAAACiEIAAAAAAACAAAAAAAAAC0UgAAAAAAAEiEIAAA
AAAACAAAAAAAAADsVwAAAAAAAGiEIAAAAAAACAAAAAAAAADvVwAAAAAAAIiEIAAAAAAACAAAAAAA
AADyVwAAAAAAAKiEIAAAAAAACAAAAAAAAADiVwAAAAAAAMiEIAAAAAAACAAAAAAAAADiVwAAAAAA
AOiEIAAAAAAACAAAAAAAAAAMWAAAAAAAAAiFIAAAAAAACAAAAAAAAAARWAAAAAAAACCFIAAAAAAA
CAAAAAAAAAAeWAAAAAAAACiFIAAAAAAACAAAAAAAAABpVQAAAAAAADCFIAAAAAAACAAAAAAAAACz
UQAAAAAAADiFIAAAAAAACAAAAAAAAAAlWAAAAAAAAGCFIAAAAAAACAAAAAAAAAAeWAAAAAAAAGiF
IAAAAAAACAAAAAAAAAAtWAAAAAAAAHCFIAAAAAAACAAAAAAAAAAlWAAAAAAAAJiFIAAAAAAACAAA
AAAAAACoVAAAAAAAALCFIAAAAAAACAAAAAAAAAD1PQAAAAAAADCGIAAAAAAACAAAAAAAAABAdCAA
AAAAAGiGIAAAAAAACAAAAAAAAACAgSAAAAAAAKiGIAAAAAAACAAAAAAAAABhOwAAAAAAAFiHIAAA
AAAACAAAAAAAAAB/VQAAAAAAAHCHIAAAAAAACAAAAAAAAAD1RgAAAAAAAPCHIAAAAAAACAAAAAAA
AACAeyAAAAAAACiIIAAAAAAACAAAAAAAAAAAgiAAAAAAADCIIAAAAAAACAAAAAAAAABAgiAAAAAA
AGiIIAAAAAAACAAAAAAAAADSQgAAAAAAAKBvIAAAAAAABgAAAAkAAAAAAAAAAAAAAKhvIAAAAAAA
BgAAABgAAAAAAAAAAAAAALBvIAAAAAAABgAAABwAAAAAAAAAAAAAALhvIAAAAAAABgAAAB0AAAAA
AAAAAAAAAMBvIAAAAAAABgAAACkAAAAAAAAAAAAAAMhvIAAAAAAABgAAACoAAAAAAAAAAAAAANBv
IAAAAAAABgAAACwAAAAAAAAAAAAAANhvIAAAAAAABgAAAC4AAAAAAAAAAAAAAOBvIAAAAAAABgAA
ADIAAAAAAAAAAAAAAOhvIAAAAAAABgAAAD4AAAAAAAAAAAAAAPBvIAAAAAAABgAAAEQAAAAAAAAA
AAAAAPhvIAAAAAAABgAAAEgAAAAAAAAAAAAAALiGIAAAAAAAAQAAAB4AAAAAAAAAAAAAAHiIIAAA
AAAAAQAAAB4AAAAAAAAAAAAAABhwIAAAAAAABwAAAAIAAAAAAAAAAAAAACBwIAAAAAAABwAAAAMA
AAAAAAAAAAAAAChwIAAAAAAABwAAAAQAAAAAAAAAAAAAADBwIAAAAAAABwAAAAUAAAAAAAAAAAAA
ADhwIAAAAAAABwAAAAYAAAAAAAAAAAAAAEBwIAAAAAAABwAAAAcAAAAAAAAAAAAAAEhwIAAAAAAA
BwAAAAgAAAAAAAAAAAAAAFBwIAAAAAAABwAAAAoAAAAAAAAAAAAAAFhwIAAAAAAABwAAAAsAAAAA
AAAAAAAAAGBwIAAAAAAABwAAAAwAAAAAAAAAAAAAAGhwIAAAAAAABwAAAA0AAAAAAAAAAAAAAHBw
IAAAAAAABwAAAA4AAAAAAAAAAAAAAHhwIAAAAAAABwAAAA8AAAAAAAAAAAAAAIBwIAAAAAAABwAA
ABAAAAAAAAAAAAAAAIhwIAAAAAAABwAAABEAAAAAAAAAAAAAAJBwIAAAAAAABwAAABIAAAAAAAAA
AAAAAJhwIAAAAAAABwAAABMAAAAAAAAAAAAAAKBwIAAAAAAABwAAABQAAAAAAAAAAAAAAKhwIAAA
AAAABwAAABUAAAAAAAAAAAAAALBwIAAAAAAABwAAAFAAAAAAAAAAAAAAALhwIAAAAAAABwAAABYA
AAAAAAAAAAAAAMBwIAAAAAAABwAAABcAAAAAAAAAAAAAAMhwIAAAAAAABwAAABkAAAAAAAAAAAAA
ANBwIAAAAAAABwAAABoAAAAAAAAAAAAAANhwIAAAAAAABwAAABsAAAAAAAAAAAAAAOBwIAAAAAAA
BwAAAB8AAAAAAAAAAAAAAOhwIAAAAAAABwAAACAAAAAAAAAAAAAAAPBwIAAAAAAABwAAAEwAAAAA
AAAAAAAAAPhwIAAAAAAABwAAACEAAAAAAAAAAAAAAABxIAAAAAAABwAAACIAAAAAAAAAAAAAAAhx
IAAAAAAABwAAACMAAAAAAAAAAAAAABBxIAAAAAAABwAAACQAAAAAAAAAAAAAABhxIAAAAAAABwAA
ACUAAAAAAAAAAAAAACBxIAAAAAAABwAAACYAAAAAAAAAAAAAAChxIAAAAAAABwAAACcAAAAAAAAA
AAAAADBxIAAAAAAABwAAACgAAAAAAAAAAAAAADhxIAAAAAAABwAAACoAAAAAAAAAAAAAAEBxIAAA
AAAABwAAACsAAAAAAAAAAAAAAEhxIAAAAAAABwAAAC0AAAAAAAAAAAAAAFBxIAAAAAAABwAAAC8A
AAAAAAAAAAAAAFhxIAAAAAAABwAAADAAAAAAAAAAAAAAAGBxIAAAAAAABwAAADEAAAAAAAAAAAAA
AGhxIAAAAAAABwAAADMAAAAAAAAAAAAAAHBxIAAAAAAABwAAADQAAAAAAAAAAAAAAHhxIAAAAAAA
BwAAADUAAAAAAAAAAAAAAIBxIAAAAAAABwAAADYAAAAAAAAAAAAAAIhxIAAAAAAABwAAADcAAAAA
AAAAAAAAAJBxIAAAAAAABwAAADgAAAAAAAAAAAAAAJhxIAAAAAAABwAAADkAAAAAAAAAAAAAAKBx
IAAAAAAABwAAADoAAAAAAAAAAAAAAKhxIAAAAAAABwAAADsAAAAAAAAAAAAAALBxIAAAAAAABwAA
ADwAAAAAAAAAAAAAALhxIAAAAAAABwAAAD0AAAAAAAAAAAAAAMBxIAAAAAAABwAAAD8AAAAAAAAA
AAAAAMhxIAAAAAAABwAAAEAAAAAAAAAAAAAAANBxIAAAAAAABwAAAEEAAAAAAAAAAAAAANhxIAAA
AAAABwAAAEIAAAAAAAAAAAAAAOBxIAAAAAAABwAAAEMAAAAAAAAAAAAAAOhxIAAAAAAABwAAAEUA
AAAAAAAAAAAAAPBxIAAAAAAABwAAAEYAAAAAAAAAAAAAAPhxIAAAAAAABwAAAEcAAAAAAAAAAAAA
AAByIAAAAAAABwAAAEgAAAAAAAAAAAAAAAhyIAAAAAAABwAAAEkAAAAAAAAAAAAAAEiD7AhIiwV9
USAASIXAdAXoWwIAAEiDxAjDAAAAAAAA/zWiUSAA/yWkUSAADx9AAP8lolEgAGgAAAAA6eD/////
JZpRIABoAQAAAOnQ/////yWSUSAAaAIAAADpwP////8lilEgAGgDAAAA6bD/////JYJRIABoBAAA
AOmg/////yV6USAAaAUAAADpkP////8lclEgAGgGAAAA6YD/////JWpRIABoBwAAAOlw/////yVi
USAAaAgAAADpYP////8lWlEgAGgJAAAA6VD/////JVJRIABoCgAAAOlA/////yVKUSAAaAsAAADp
MP////8lQlEgAGgMAAAA6SD/////JTpRIABoDQAAAOkQ/////yUyUSAAaA4AAADpAP////8lKlEg
AGgPAAAA6fD+////JSJRIABoEAAAAOng/v///yUaUSAAaBEAAADp0P7///8lElEgAGgSAAAA6cD+
////JQpRIABoEwAAAOmw/v///yUCUSAAaBQAAADpoP7///8l+lAgAGgVAAAA6ZD+////JfJQIABo
FgAAAOmA/v///yXqUCAAaBcAAADpcP7///8l4lAgAGgYAAAA6WD+////JdpQIABoGQAAAOlQ/v//
/yXSUCAAaBoAAADpQP7///8lylAgAGgbAAAA6TD+////JcJQIABoHAAAAOkg/v///yW6UCAAaB0A
AADpEP7///8lslAgAGgeAAAA6QD+////JapQIABoHwAAAOnw/f///yWiUCAAaCAAAADp4P3///8l
mlAgAGghAAAA6dD9////JZJQIABoIgAAAOnA/f///yWKUCAAaCMAAADpsP3///8lglAgAGgkAAAA
6aD9////JXpQIABoJQAAAOmQ/f///yVyUCAAaCYAAADpgP3///8lalAgAGgnAAAA6XD9////JWJQ
IABoKAAAAOlg/f///yVaUCAAaCkAAADpUP3///8lUlAgAGgqAAAA6UD9////JUpQIABoKwAAAOkw
/f///yVCUCAAaCwAAADpIP3///8lOlAgAGgtAAAA6RD9////JTJQIABoLgAAAOkA/f///yUqUCAA
aC8AAADp8Pz///8lIlAgAGgwAAAA6eD8////JRpQIABoMQAAAOnQ/P///yUSUCAAaDIAAADpwPz/
//8lClAgAGgzAAAA6bD8////JQJQIABoNAAAAOmg/P///yX6TyAAaDUAAADpkPz///8l8k8gAGg2
AAAA6YD8////JepPIABoNwAAAOlw/P///yXiTyAAaDgAAADpYPz///8l2k8gAGg5AAAA6VD8////
JdJPIABoOgAAAOlA/P///yXKTyAAaDsAAADpMPz///8lwk8gAGg8AAAA6SD8////JbpPIABoPQAA
AOkQ/P///yWyTyAAaD4AAADpAPz//0iNPWFmIABVSI0FYGYgAEiJ5Ugp+EiD+A52FUiLBR5NIABI
hcB0CV3/4GYPH0QAAF3DZmZmZmYuDx+EAAAAAABIjT0hZiAAVUiNNRlmIABIieVIKf5Iwf4DSInw
SMHoP0gBxkjR/nQYSIsFIU0gAEiFwHQMXf/gZg8fhAAAAAAAXcNmZmZmZi4PH4QAAAAAAIA90WUg
AAB1J0iDPfdMIAAAVUiJ5XQMSIs9Mk8gAOgt////6Ej///9dxgWoZSAAAcNmZmZmZmYuDx+EAAAA
AABIjT1xSiAASIM/AHUL6V7///9mDx9EAABIiwWZTCAASIXAdOlVSInl/9Bd6UD///9VSInlSIPs
QEiJfdhIiXXQSIlVyEiJTcBIx0XoAAAAAEjHRfAAAAAASIN9wAB1IujM/f//SIlF8EiLRfBIiUXA
SIN9wAB1CrgAAAAA6c4AAABIg33QAHRuSItF0EiJx+hc/v//SIlF+EiDffgAdQLrcEiLVfhIi0XA
SI01ECwAAEiJx+io+v//iUXkSItF+EiLAEiNUP9Ii0X4SIkQSItF+EiLAEiFwHUVSItF+EiLQAhI
i0AwSItV+EiJ1//Qg33kAHkC6xtIi1XASItNyEiLRdhIic5IicfoQ/z//0iJRehIg33wAHQzSItF
8EiLAEiNUP9Ii0XwSIkQSItF8EiLAEiFwHUVSItF8EiLQAhIi0AwSItV8EiJ1//QSItF6MnDVUiJ
5UiD7BBIiX34SItF+EiLQBBIhcB1aEiLRfhIi0AQSIXAdQe4AAAAAOtcSItF+EiDwBBIicfosvr/
/0iLRfhIiwBIhcB0H0iNDf8yAAC6XgAAAEiNNRsrAABIjT0xKwAA6Bf7//9IixXgYyAASItF+EiJ
EEiLRfhIiQXOYyAASItF+EiLQBDJw1VIieVIg+wwSIl96EiJdeBIiVXYSItF4EiJx+j0+v//SIlF
+EiDffgAdQe4/////+sXSItV2EiLTfhIi0XoSInOSInH6Gv8///Jw1VIieVIg+wQiX38g338Cw+H
EQEAAItF/EiNFIUAAAAASI0FhisAAIsEAkhj0EiNBXkrAABIAdD/4LgAAAAA6QYBAABIiwU3YyAA
SI01dyoAAEiJx+gg+v//uAEAAADp5gAAAOjR+f//uAEAAADp1wAAAEiLBQhjIABIjTVkKgAASInH
6PH5//+4AQAAAOm3AAAASIsF6GIgAEiNNWEqAABIicfo0fn//7gBAAAA6ZcAAABIiwXIYiAASI01
aSoAAEiJx+ix+f//uAEAAADrekiLBatiIABIjTVrKgAASInH6JT5//+4AQAAAOtdSIsFjmIgAEiN
NWEqAABIicfod/n//7gBAAAA60BIiwVxYiAASI01XioAAEiJx+ha+f//uAEAAADrI0iLBVRiIACL
VfxIjTVSKgAASInHuAAAAADoZfv//7gBAAAAycNVSInlSIPsIEiJfehIi0XoSIsASItAEEiJRfhI
i0X4SMHoA0iJwkiLRfhIAdBIg8AGSInCSItF6EiJ1kiJx+gb+P//ycNVSInlSIPsIEiJfehIiXXg
SItF6EiLQAhIi4CoAAAAJQAAgABIhcB0EkiLRehIicfo1Pf//0iJRfjrMkiLRehIi0AISIuAqAAA
ACUAAAABSIXAdBJIi0XoSInH6An4//9IiUX46we4AAAAAOtO6Hf5//9IhcB0B7gAAAAA6z1Ii0X4
icBIO0X4dCBIiwVYSCAASIsASI01tikAAEiJx+hG+P//uAAAAADrEUiLRfiJwkiLReCJELgBAAAA
ycNVSInlSIPsIEiJfehIiXXgSItF6EiLQAhIi4CoAAAAJQAAgABIhcB0EkiLRehIicfoF/f//0iJ
RfjrMkiLRehIi0AISIuAqAAAACUAAAABSIXAdBJIi0XoSInH6Ez3//9IiUX46we4AAAAAOsh6Lr4
//9IhcB0B7gAAAAA6xBIi0XgSItV+EiJELgBAAAAycNVSInlSIPsIEiJfehIiXXgSItF6EiLQAhI
i4CoAAAAJQAAgABIhcB0EkiLRehIicfoh/b//0iJRfjrMkiLRehIi0AISIuAqAAAACUAAAABSIXA
dBJIi0XoSInH6Lz2//9IiUX46we4AAAAAOtO6Cr4//9IhcB0B7gAAAAA6z1Ii0X4icBIO0X4dCBI
iwULRyAASIsASI01kSgAAEiJx+j59v//uAAAAADrEUiLRfiJwkiLReCJELgBAAAAycNVSInlSIPs
IEiJfehIiXXgSItF6EiLQAhIi4CoAAAAJQAAgABIhcB0EkiLRehIicfoyvX//0iJRfjrMkiLRehI
i0AISIuAqAAAACUAAAABSIXAdBJIi0XoSInH6P/1//9IiUX46we4AAAAAOtO6G33//9IhcB0B7gA
AAAA6z1Ii0X4icBIO0X4dCBIiwVORiAASIsASI01/CcAAEiJx+g89v//uAAAAADrEUiLRfiJwkiL
ReCJELgBAAAAycNVSInlQVVBVFNIg+xISIl9qGRIiwQlKAAAAEiJRdgxwMdFuAYAAABIi0WoSI01
0ycAAEiJx+gI9v//SIlFyEiLRchIhcB1J0iLBcRFIABIiwBIicfoKfb//4XAdAfogPb//+tbuAAA
AADpxQEAAEiLRchIjVW4SInWSInH6Lj8//+JRbxIi0XISIsQSIPqAUiJEEiLAEiFwHUVSItFyEiL
QAhIi0AwSItVyEiJ1//Qg328AHUKuAAAAADpdAEAAL9wAAAA6Ln3//9IiUXQSIN90AB1CugJ9f//
6VUBAABIi0XQunAAAAC+AAAAAEiJx+hu9f//i1W4SItF0InWSInH6N32//+EwHQ0SItF0EiJx+hd
9P//i1W4SIsFC14gAEiNNewmAABIice4AAAAAOgf9///uAAAAADp9gAAAEiLRdBIjUgsSItF0EyN
aChIi0XQTI1gJEiLRdBIjVggSItF0EyNWBxIi0XQTI1QGEiLRdBMjUgUSItV0EiLBbJdIABMjUXI
SI19wEiLdahRSI0Npfv//1FBVUiNDaX9//9RQVRIjQ2R+///UVNIjQ3V/P//UUFTSI0Nfvv//1FB
UkiNDXT7//9RQVFIjQ1q+///UVJIjRVh+///Uk2JwUmJ+EiNDexXIABIjRVEJgAASInHuAAAAADo
iPX//0iD7ICFwHUtSIsF+UMgAEiLAEiNNTcmAABIicfoB/T//0iLRdBIicfoS/P//0jHRdAAAAAA
SItF0EiLXdhkSDMcJSgAAAB0BejL8///SI1l6FtBXEFdXcNVSInlSIPsMEiJfdhkSIsEJSgAAABI
iUX4McDHReQBAAAASIsFt1wgAEiD7AhIjU3oSIt12EiNVeRSTI0Npvr//0mJyEiNDZVXIABIjRXP
JQAASInHuAAAAADo0fT//0iDxBCFwHUgSIsFQkMgAEiLAEiNNbAlAABIicfoUPP//7gAAAAA60q/
KAAAAOif9f//SIlF8EiDffAAdQfo7/L//+suSItF8LooAAAAvgAAAABIicfoV/P//0iLRfDHAAAA
AACLVeRIi0XwiVAESItF8EiLTfhkSDMMJSgAAAB0Bejb8v//ycNVSInlSIPsMEiJfdhkSIsEJSgA
AABIiUX4McDHReQAAAAASIsF0FsgAEiD7AhIjU3oSIt12EiNVeRSTI0Nv/n//0mJyEiNDc5WIABI
jRXoJAAASInHuAAAAADo6vP//0iDxBCFwHUgSIsFW0IgAEiLAEiNNfkkAABIicfoafL//7gAAAAA
6z+/BAAAAOi49P//SIlF8EiDffAAdQfoCPL//+sjSItF8LoEAAAAvgAAAABIicfocPL//4tV5EiL
RfCJEEiLRfBIi034ZEgzDCUoAAAAdAXo//H//8nDVUiJ5UiD7CBIiX3oSIl14EiLReBIicfoAfH/
/4XAdSNIiwXOQSAASIsASI01jCQAAEiJx+jU8f//uAAAAADp+gEAAEiLReBIjTWjJAAASInH6Nfx
//9IiUX4SIN9+AB1OUiLBZVBIABIiwBIicfo+vH//4XAdBlIiwVvQSAASIsASI01bSQAAEiJx+h9
8f//uAAAAADpowEAAEiLRfhIi0AISIuAqAAAACUAAIAASIXAdBhIi0X4SInH6G7w//9IicJIi0Xo
SIkQ625Ii0X4SItACEiLgKgAAAAlAAAAAUiFwHQYSItF+EiJx+id8P//SInCSItF6EiJEOs9SItF
+EiLAEiNUP9Ii0X4SIkQSItF+EiLAEiFwHUVSItF+EiLQAhIi0AwSItV+EiJ1//QuAAAAADpBAEA
AEiLRfhIiwBIjVD/SItF+EiJEEiLRfhIiwBIhcB1FUiLRfhIi0AISItAMEiLVfhIidf/0Oic8f//
SIXAdAq4AAAAAOm9AAAASItF6EiLAEiD+Al3DkiD+ARzX0iD+AN0OOt4SIP4IXQPSLoBAAAAAAAA
QEg50HVjSItF4EiJx+gv+v//SInCSItF6EiJUAhIi0XoSItACOtsSItF4EiJx+hg/P//SInCSItF
6EiJUAhIi0XoSItACOtLSItF4EiJx+gm/f//SInCSItF6EiJUAhIi0XoSItACOsqSItF6EiLEEiL
Bcw/IABIiwBIjTXzIgAASInHuAAAAADoBfL//7gAAAAAycNVSInlSIPsIEiJfejHRfwAAAAA6yOL
RfxImEjB4ARIicJIi0XoSAHQSItACEiJx+jq7v//g0X8AYtF/EiYSMHgBEiJwkiLRehIAdBIiwBI
g/j/dcHJw1VIieVIg+wwSIl92EiJddBIi0XQSInH6Pzv//9IiUXwSIN98P91Crj/////6TABAABI
g33wBH4tSIsFGT8gAEiLALoEAAAASI01WiIAAEiJx7gAAAAA6E3x//+4/////+n8AAAASMdF6AAA
AADpwwAAAMdF5AEAAABIi1XoSItF0EiJ1kiJx+hc7///SIlF+EiDffgAdCZIi0XoSMHgBEiJwkiL
RdhIAcJIi0X4SInGSInX6LP8//9IhcB1B8dF5AAAAABIg334AHQzSItF+EiLAEiNUP9Ii0X4SIkQ
SItF+EiLAEiFwHUVSItF+EiLQAhIi0AwSItV+EiJ1//Qg33kAHUsSItF6EjB4ARIicJIi0XYSAHQ
SMcA/////0iLRdhIicfogf7//7j/////6zFIg0XoAUiLRehIO0XwD4wv////SItF8EjB4ARIicJI
i0XYSAHQSMcA/////7gAAAAAycNVSInlSIPsMEiJfehIiXXgSIlV2EiLRdhIicfoVe3//0iJRfhI
g334AHUHuP/////rVEiLReBIi0gISItV+EiLRehIic5IicfoiOz//4lF9EiLRfhIiwBIjVD/SItF
+EiJEEiLRfhIiwBIhcB1FUiLRfhIi0AISItAMEiLVfhIidf/0ItF9MnDVUiJ5UiD7EBIiX3I6Azv
//9IiUXYSIN92AB1CrgAAAAA6QsCAABIi0XISIsQSItF2EiNNaVRIABIicfoOP///4P4/3UF6a8B
AABIi0XISIsASIP4CXcZSIP4BA+DOwEAAEiD+AMPhAABAADpXAEAAEiD+CEPhLsAAABIugEAAAAA
AABASDnQD4U/AQAASItFyEiLQAhIiUXgSItF4ItAFInCSItF2EiNNVBRIABIicfow/7//4P4/3UF
6ToBAABIi0Xgi0AYicJIi0XYSI01SlEgAEiJx+id/v//g/j/dQXpFAEAAEiLReCLQByJwkiLRdhI
jTVEUSAASInH6Hf+//+D+P91BenuAAAASItF4IsAicJIi0XYSI01P1EgAEiJx+hS/v//g/j/dQXp
yQAAAOm+AAAASItFyEiLQAhIiUXoSItF6IsAicJIi0XYSI01KVEgAEiJx+gc/v//g/j/dQXpkwAA
AOmIAAAASItFyEiLQAhIiUXwSItF8ItABInCSItF2EiNNRJRIABIicfo5f3//4P4/3UC61/rV0iL
RchIi0AISIlF+EiLRfiLAInCSItF2EiNNQJRIABIicfotf3//4P4/3UC6y/rJ0iLRchIixBIiwWT
OyAASIsASI01uh4AAEiJx7gAAAAA6Mzt///rBkiLRdjrOEiLRdhIiwBIjVD/SItF2EiJEEiLRdhI
iwBIhcB1FUiLRdhIi0AISItAMEiLVdhIidf/0LgAAAAAycNVSInlSIPsUEiJfchIiXXASIlVuIlN
tGRIiwQlKAAAAEiJRfgxwEjHRegAAAAAvgAgAAC/AAAAAOjN6f//SIlF4EiLReBIhcB1CrgAAAAA
6XUBAABIi0XISItVwEiJUBBIi0XISItVuEiJUBhIi0XgSI1QJEiLRchIiVAoSItF4EiLQBBIicJI
i0XISIlQMOiW7P//SIlF8EiLRchIjVAQi0W0icZIidfozez//4lF3EiLRchIi0AoSInCSItF4EiD
wCRIKcJIidBIiUXoSItF8EiJx+jB6f//i0Xcicfo/u///4XAdAXppAAAAIN9tAB1DUiLRchIi0AY
SIXAdGODfbQDdQaDfdwBdFdIi0XISItAMEiFwHVFSI1F4EiJx+gI8f//g/j/dQLrZUiLReBIi1Xo
SIPCIEgB0EiNUARIi0XISIlQKEiLReBIi0AQSCtF6EiJwkiLRchIiVAw6S3///9Ii0XgSItAEEg7
Reh0GkiLVehIjUXgSInWSInH6Afp//+D+P91AusGSItF4Os5SItF4EiFwHQrSItF4EiLEEiD6gFI
iRBIiwBIhcB1FUiLReBIi0AISItAMEiLVeBIidf/0LgAAAAASItN+GRIMwwlKAAAAHQF6G3p///J
w1VIieVIgeyQAAAASIm9eP///0iJtXD///9kSIsEJSgAAABIiUX4McBIx0WAAAAAAEiNVZBIi4Vw
////SI01nRwAAEiJx7gAAAAA6Ezq//+FwHUKuAAAAADpxAAAAEiLhXj///9Ii4CgAAAAvgAAAABI
icfo4+j//4XAdTDoyur//0iJRYhIi4V4////SIuAoAAAAL4BAAAASInH6Lvo//9Ii0WISInH6A/o
//9Ii4V4////i4CYAAAAhcB0G0iLBZc4IABIiwBIjTUdHAAASInH6KXo///rI0iLRaBIicJIi3WQ
SIuFeP///7kAAAAASInH6Cr9//9IiUWASIuFeP///0iLgKAAAABIicfo2un//0iNRZBIicfozuf/
/0iLRYBIi034ZEgzDCUoAAAAdAXoNuj//8nDVUiJ5UiD7CBIiX3oSIl14EjHRfAAAAAASItF6EiL
gKAAAAC+AAAAAEiJx+j05///hcB1Lejb6f//SIlF+EiLRehIi4CgAAAAvgEAAABIicfoz+f//0iL
RfhIicfoI+f//0iLReiLgJgAAACFwHQbSIsFrjcgAEiLAEiNNVAbAABIicfovOf//+stSItF6MeA
mAAAAAEAAABIi0XouQMAAAC6AAAAAL4AAAAASInH6Df8//9IiUXwSItF6EiLgKAAAABIicfo6uj/
/0iLRfDJw1VIieVIgeyQAAAASIl9iIl1hIlVgEiJjXj///9kSIsEJSgAAABIiUX4McBIiwVSNyAA
SDmFeP///3UZi1WEi02ASItFiInOSInH6MXl//+JRZzrR0iLlXj///9IjUWgSInWSInH6JL3//+D
+P91B7j/////6z+LVYRIjU2gSItFiEiJzkiJx+j46P//iUWcSI1FoEiJx+gL9///i0WcicfoVuz/
/4XAdAe4/////+sFuAAAAABIi3X4ZEgzNCUoAAAAdAXom+b//8nDVUiJ5UiB7AABAABIib0Y////
ibUU////SImVCP///2RIiwQlKAAAAEiJRfgxwEiLBYQ2IABIOYUI////dWSLlRT///9IjUWAidZI
icfoF+j//4TAdCtIiwVUTyAAi5UU////SI01LxgAAEiJx7gAAAAA6GLo//+4/////+nmAAAASI1V
gEiLhRj///9IidZIicfoIub//4mFLP///+meAAAASIuVCP///0iNhTD///9IidZIicfodvb//4P4
/3UKuP/////pnQAAAEiLlTD///9IuAEAAAAAAABASDnCdS5Ii4VA////SIP4/3UhSIuVOP///0iL
hRj///9IidZIicfos+X//4mFLP///+sjSIsFdDUgAEiLAEiNNTIZAABIicfoguX//8eFLP///wsA
AABIjYUw////SInH6Jv1///oZOb//0iFwHURi4Us////icfo2er//4XAdAe4/////+sFuAAAAABI
i034ZEgzDCUoAAAAdAXoHuX//8nDVUiJ5UiDxIBIiX2ISIl1gGRIiwQlKAAAAEiJRfgxwEiLBRY1
IABIOUWAdSBIiwXZNCAASIsASI013xgAAEiJx+jn5P//uP/////rW0iLVYBIjUWgSInWSInH6FX1
//+D+P91B7j/////6zxIjVWgSItFiEiJ1kiJx+he5P//iUWcSI1FoEiJx+jR9P//i0WcicfoHOr/
/4XAdAe4/////+sFuAAAAABIi034ZEgzDCUoAAAAdAXoYeT//8nDVUiJ5UiD7FBIiX3ISIl1wEiJ
VbhkSIsEJSgAAABIiUX4McDHRdwBAAAAx0Xg/////8dF5AYAAABIiwVANCAASIlF6EiLBTU0IABI
iUXwSI194EiNTdxIi3W4SItFwEiNVfBSSI1V6FJJiflJichIjQ1KSSAASI0VBxgAAEiJx7gAAAAA
6Ebl//9Ig8QQhcB1Crj/////6eMBAACLRdyD+AF0MotF4IP4/3Qqi0XghcB0I0iLBZYzIABIiwBI
jTXcFwAASInH6KTj//+4/////+mpAQAASItF6EiLFZ8zIABIOdB0M0iLRfBIixWPMyAASDnQdCNI
iwVTMyAASIsASI010RcAAEiJx+hh4///uP/////pZgEAAEiLRehIixVcMyAASDnQdCFIi0XoSI1V
5EiJ1kiJx+hL6v//hcB1Crj/////6TUBAADoceT//0iJwkiLRchIiZCgAAAASItFyEiLgKAAAABI
hcB1I0iLBdQyIABIiwBIjTWGFwAASInH6Ori//+4/////+nvAAAASItFyMeAmAAAAAAAAACLRdyD
+AJ0RoP4A3Rng/gBD4WCAAAAi0Xgg/j/dQfHReAEAAAASItN8ItV5ItF4EiLdchIjX4QicboIPv/
/4XAdALrdrgAAAAA6ZMAAABIi1Xwi0XkSItNyEiDwRCJxkiJz+jC+///hcB0AutNuAAAAADrbUiL
RfBIi1XISIPCEEiJxkiJ1+gb/f//hcB0AuspuAAAAADrSYtV3EiLBRAyIABIiwBIjTXSFgAASInH
uAAAAADoSeT//5BIi0XISIuAoAAAAEiJx+iF5P//SItFyEjHgKAAAAAAAAAAuP////9Ii034ZEgz
DCUoAAAAdAXozeH//8nDVUiJ5UiD7BBIiX34SItF+EiDwBBIicfoz+L//0iLRfhIi4CgAAAASIXA
dBNIi0X4SIuAoAAAAEiJx+gc5P//SItF+EiLQAhIi4BAAQAASItV+EiJ1//QycNVSInlSIPsUEiJ
fchIiXXASIlVuGRIiwQlKAAAAEiJRfgxwEjHReAAAAAAvgAgAAC/AAAAAOj43///SIlF2EiLRdhI
hcB1CrgAAAAA6VcCAABIi0XISItVwEiJUBBIi0XISItVuEiJUBhIi0XYSI1QJEiLRchIiVAoSItF
2EiLQBBIicJIi0XISIlQMOjB4v//SIlF6EiLRchIg8AQvgAAAABIicfo+OL//4lF1EiLRchIi0Ao
SInCSItF2EiDwCRIKcJIidBIiUXgSItF6EiJx+js3///i0XUicfoKeb//4XAdAXphgEAAIN91AR0
BoN91AJ1HEiLRchIg8AQSInH6K3h//+JwkiLRciJkJgAAACDfdQBD4XAAAAASItFyMaAnAAAAAFI
i0XISItAGEiFwA+EogAAAEiLRchIi4CgAAAASIXAdFFIi0XISIuAoAAAAEiJRfBIi0XISMeAoAAA
AAAAAABIi0XwSIsASI1Q/0iLRfBIiRBIi0XwSIsASIXAdRVIi0XwSItACEiLQDBIi1XwSInX/9BI
i0XISItAGEiJwkiLRchIi0AQSInWSInH6Hze//9IicJIi0XISImQoAAAAEiLRchIi4CgAAAASIXA
dQXplgAAAOtmSItFyEiLQBhIhcB1AutXSItFyEiLQDBIhcB1RUiNRdhIicfoUeb//4P4/3UC62VI
i0XYSItV4EiDwiBIAdBIjVAESItFyEiJUChIi0XYSItAEEgrReBIicJIi0XISIlQMOlL/v//SItF
2EiLQBBIO0XgdBpIi1XgSI1F2EiJ1kiJx+hQ3v//g/j/dQLrBkiLRdjrOUiLRdhIhcB0K0iLRdhI
ixBIg+oBSIkQSIsASIXAdRVIi0XYSItACEiLQDBIi1XYSInX/9C4AAAAAEiLTfhkSDMMJSgAAAB0
Bei23v//ycNVSInlSIHskAAAAEiJvXj///9IibVw////ZEiLBCUoAAAASIlF+DHASMdFgAAAAABI
jVWQSIuFcP///0iNNW8TAABIice4AAAAAOiV3///hcB1CrgAAAAA6cMAAABIi4V4////SIuAqAAA
AL4AAAAASInH6Cze//+FwHUw6BPg//9IiUWISIuFeP///0iLgKgAAAC+AQAAAEiJx+gE3v//SItF
iEiJx+hY3f//SIuFeP///w+2gJwAAACEwHQbSIsFBy4gAEiLAEiNNfASAABIicfo7d3//+shSItF
oEiJwkiLTZBIi4V4////SInOSInH6Ez8//9IiUWASIuFeP///0iLgKgAAABIicfoJN///0iNRZBI
icfoGN3//0iLRYBIi034ZEgzDCUoAAAAdAXogN3//8nDVUiJ5UiDxIBIiX2ISIl1gGRIiwQlKAAA
AEiJRfgxwEiLVYBIjUWgSInWSInH6OTt//+D+P91B7j/////6zxIjVWgSItFiEiJ1kiJx+i93v//
iUWcSI1FoEiJx+hg7f//i0Wcicfoq+L//4XAdAe4/////+sFuAAAAABIi034ZEgzDCUoAAAAdAXo
8Nz//8nDVUiJ5UiD7GBIiX24SIl1sEiJVahkSIsEJSgAAABIiUX4McDHRdAFAAAAx0XMAAAAAEjH
Rej/////SIsFziwgAEiJRdhIiwXDLCAASIlF4EiD7AhIjX3YSI1NzEiLdahIi0WwSI1V4FJJiflJ
ichIjQ0ZQiAASI0VlhEAAEiJx7gAAAAA6NXd//9Ig8QQhcB1Crj/////6XIDAABIi0XYSIsVaCwg
AEg50A+EnwAAAItFzIP4A3UjSIsFICwgAEiLAEiNNWYRAABIicfoLtz//7j/////6TMDAABIi0XY
SItACEiLgKgAAAAlAACAAEiFwHQSSItF2EiJx+gf2///SIlF6Os1SItF2EiLQAhIi4CoAAAAJQAA
AAFIhcB0EkiLRdhIicfoVNv//0iJRejrCrj/////6dMCAADov9z//0iFwHQKuP/////pvwIAAItF
zIP4A3UzSItF4EiLFa0rIABIOdB1I0iLBXErIABIiwBIjTV3DwAASInH6H/b//+4/////+mEAgAA
i0XMg/gDdDNIi0XgSIsVcisgAEg50HQjSIsFNisgAEiLAEiNNawQAABIicfoRNv//7j/////6UkC
AADohdz//0iJwkiLRbhIiZCoAAAASItFuEiLgKgAAABIhcB1I0iLBegqIABIiwBIjTWaDwAASInH
6P7a//+4/////+kDAgAASItFuMeAmAAAABAAAAC+AAAAAL8AAAAA6IfZ//9IicJIi0W4SImQoAAA
AEiLRbhIi4CgAAAASIXAdQXpOwEAAItFzIP4AXRfg/gBfwmFwHQc6QMBAACD+AIPhIIAAACD+AMP
hLsAAADp7AAAAEiLRbhIjUgQi1XQSItF6EiJxkiJz+ht3P//iUXUi0XUicfo59///4XAdAXp3gAA
ALgAAAAA6VwBAABIi0W4SI1IEItV0EiLRehIicZIic/oM9n//4lF1ItF1InH6K3f//+FwHQF6aQA
AAC4AAAAAOkiAQAASItFuMeAmAAAAAAAAABIi0W4SI1QEEiLRehIicZIidfontv//4lF1ItF1InH
6Gjf//+FwHQC62K4AAAAAOngAAAASItFuMeAmAAAAAAAAABIi0XgSItVuEiDwhBIicZIidfoHvz/
/4P4/3UC6yy4AAAAAOmqAAAAi1XMSIsFcSkgAEiLAEiNNTMOAABIice4AAAAAOiq2///kEiLRbhI
i4CgAAAASIXAdFFIi0W4SIuAoAAAAEiJRfBIi0W4SMeAoAAAAAAAAABIi0XwSIsASI1Q/0iLRfBI
iRBIi0XwSIsASIXAdRVIi0XwSItACEiLQDBIi1XwSInX/9BIi0W4SIuAqAAAAEiJx+iF2///SItF
uEjHgKgAAAAAAAAAuP////9Ii034ZEgzDCUoAAAAdAXozdj//8nDVUiJ5UiD7CBIiX3oSItF6EiD
wBBIicfoz9n//0iLRehIi4CgAAAASIXAdFFIi0XoSIuAoAAAAEiJRfhIi0XoSMeAoAAAAAAAAABI
i0X4SIsASI1Q/0iLRfhIiRBIi0X4SIsASIXAdRVIi0X4SItACEiLQDBIi1X4SInX/9BIi0XoSIuA
qAAAAEiFwHQTSItF6EiLgKgAAABIicfou9r//0iLRehIi0AISIuAQAEAAEiLVehIidf/0MnDVUiJ
5UiD7CBIiX3oSIl14GRIiwQlKAAAAEiJRfgxwEiNVfRIi0XgSI01uQ0AAEiJx7gAAAAA6AbZ//+F
wHUHuAAAAADrFYtF9InH6LHW//8PtsBIicfoltj//0iLTfhkSDMMJSgAAAB0Beii1///ycNVSInl
SIPsUEiJfbhIiXWwZEiLBCUoAAAASIlF+DHASMdF2AAAAABIjVXQSItFsEiNNVUNAABIice4AAAA
AOiN2P//hcB1CrgAAAAA6e4AAABIi1XQSI1F4EiJ1kiJx+g/5f//SIXAdQq4AAAAAOnMAAAASI1V
4EiNRchIidZIicfoatj//4lFzItFzInH6KTc//+FwHQC61uLRciJwEiJxr8AAAAA6LXV//9IiUXY
SIN92AB1Aus8SItF2EiNUCRIjUXgSInWSInH6IHY//+JRcyLRcyJx+hb3P//hcB0AusSSItF6EiJ
x+gS1v//SItF2OtLSIN92AB0M0iLRdhIiwBIjVD/SItF2EiJEEiLRdhIiwBIhcB1FUiLRdhIi0AI
SItAMEiLVdhIidf/0EiLRehIicfoxtX//7gAAAAASItN+GRIMwwlKAAAAHQF6E3W///Jw1VIieVI
geygAAAASIm9aP///0iJtWD///9kSIsEJSgAAABIiUX4McBIx4V4////AAAAAEiNTZBIjVWASIuF
YP///0mJyEiJ0UiNFeDd//9IjTX9CwAASInHuAAAAADoGNf//4XAdQe4AAAAAOtsSItFoEiJwUiL
VZBIjUWAvgAAAABIicfoUdb//4mFdP///0iNRZBIicfoL9X//4uFdP///4nH6Dnb//+FwHQHuAAA
AADrJkiNRYBIicfoDuj//0iJhXj///9Ii0WISInH6FjU//9Ii4V4////SIt1+GRIMzQlKAAAAHQF
6F3V///Jw1VIieVIg+wwSIl96EiJdeBIiVXYSItF2EiJx+iL1///SIlF+EiDffgAdQe4/////+ta
SItV+EiLTeBIi0XoSInOSInH6ALX//+FwHUHuAAAAADrOEiLRfhIiwBIjVD/SItF+EiJEEiLRfhI
iwBIhcB1FUiLRfhIi0AISItAMEiLVfhIidf/0Lj/////ycNVSInlSIPsEL8AAAAA6LvV//9IiQXU
PSAASIsFzT0gAEiFwHUF6bgEAABBuPUDAAC5AAAAALoAAAAASI01zDcgAEiNPfMKAADoINT//0iJ
RfhIg334AHUF6YUEAABIi0X4ugAAAABIjTXUCgAASInH6FjT//+D+P8PhGwDAABIi0X4ugEAAABI
jTW/CgAASInH6DfT//+D+P8PhEsDAABIi0X4ugIAAABIjTWoCgAASInH6BbT//+D+P8PhCoDAABI
i0X4ugMAAABIjTWUCgAASInH6PXS//+D+P8PhAkDAABIi0X4ugAAAABIjTV+CgAASInH6Hn+//+D
+P8PhOgCAABIi0X4ugEAAABIjTVoCgAASInH6Fj+//+D+P8PhMcCAABIi0X4ugQAAABIjTVTCgAA
SInH6Df+//+D+P8PhKYCAABIi0X4ugoAAABIjTU+CgAASInH6Bb+//+D+P8PhIUCAABIi0X4ug8A
AABIjTUqCgAASInH6PX9//+D+P8PhGQCAABIi0X4uhAAAABIjTUWCgAASInH6NT9//+D+P8PhEMC
AABIi0X4SLoBAAAAAAAAQEiNNf4JAABIicforv3//4P4/w+EHQIAAEiLRfi6IQAAAEiNNeoJAABI
icfojf3//4P4/w+E/AEAAEiLRfi6AwAAAEiNNdYJAABIicfobP3//4P4/w+E2wEAAEiLRfi6BAAA
AEiNNcIJAABIicfoS/3//4P4/w+EugEAAEiLRfi6BgAAAEiNNawJAABIicfoKv3//4P4/w+EmQEA
AEiLRfi6BwAAAEiNNZcJAABIicfoCf3//4P4/w+EeAEAAEiLRfi6CAAAAEiNNYEJAABIicfo6Pz/
/4P4/w+EVwEAAEiLRfi6CQAAAEiNNXAJAABIicfox/z//4P4/w+ENgEAAEiLRfi6BQAAAEiNNVwJ
AABIicfopvz//4P4/w+EFQEAAEiLRfi6AwAAAEiNNUoJAABIicfohfz//4P4/w+E9AAAAEiLRfi6
BAAAAEiNNTAJAABIicfoZPz//4P4/w+E0wAAAEiLRfi6EgAAAEiNNRYJAABIicfoQ/z//4P4/w+E
sgAAAEiLRfi6EwAAAEiNNfwIAABIicfoIvz//4P4/w+EkQAAAEiLRfi6FAAAAEiNNeIIAABIicfo
Afz//4P4/3R0SItF+LoBAAAASI01zAgAAEiJx+jk+///g/j/dFdIi0X4ugIAAABIjTW5CAAASInH
6Mf7//+D+P90OkiLRfi6BgAAAEiNNagIAABIicfoqvv//4P4/3QdSItF+LoAAACASI01mggAAEiJ
x+iN+///g/j/dQXp8wAAALkAAAAAugAAAABIjTWGCAAASI09lwgAAOih0P//SIkF0jkgAEiLBcs5
IABIhcB1Bem+AAAASIsFujkgAEiLEEiDwgFIiRBIixWpOSAASItF+EiNNWcIAABIicfobtL//4P4
/3UF6YkAAABIjT0tNiAA6AjR//+D+P91Aut2SI0FGjYgAEiLEEiDwgFIiRBIi0X4SI0VBTYgAEiN
NSkIAABIicfoJtL//4P4/3UC60RIjT2oNyAA6MPQ//+D+P91AusxSI0FlTcgAEiLEEiDwgFIiRBI
i0X4SI0VgDcgAEiNNfMHAABIicfo4dH//4P4/3UBkMnDAEiD7AhIg8QIwwAAAAAAAAAAAAAAAAAA
AF9fZG9jX18AYmFja3BvcnRzL2x6bWEvX2x6bWFtb2R1bGUuYwAhaWQtPm5leHQAVW5zdXBwb3J0
ZWQgaW50ZWdyaXR5IGNoZWNrAE1lbW9yeSB1c2FnZSBsaW1pdCBleGNlZWRlZAAASW5wdXQgZm9y
bWF0IG5vdCBzdXBwb3J0ZWQgYnkgZGVjb2RlcgAAAEludmFsaWQgb3IgdW5zdXBwb3J0ZWQgb3B0
aW9ucwBDb3JydXB0IGlucHV0IGRhdGEASW5zdWZmaWNpZW50IGJ1ZmZlciBzcGFjZQBJbnRlcm5h
bCBlcnJvcgAAAAAAAFVucmVjb2duaXplZCBlcnJvciBmcm9tIGxpYmx6bWE6ICVkAIzU//+M1P//
jNT//5bU//+M1P//ttT//8XU///l1P//BdX//yLV//8/1f//XNX//wAAAABWYWx1ZSB0b28gbGFy
Z2UgZm9yIHVpbnQzMl90IHR5cGUAAAAAAAAAVmFsdWUgdG9vIGxhcmdlIGZvciBsem1hX21vZGUg
dHlwZQAAAAAAAFZhbHVlIHRvbyBsYXJnZSBmb3IgbHptYV9tYXRjaF9maW5kZXIgdHlwZQBwcmVz
ZXQAAAAAAAAASW52YWxpZCBjb21wcmVzc2lvbiBwcmVzZXQ6ICVkAHxPT08mTyZPJk8mTyZPJk8m
TyYAAAAAAABJbnZhbGlkIGZpbHRlciBzcGVjaWZpZXIgZm9yIExaTUEgZmlsdGVyAHxPTyYAAABJ
bnZhbGlkIGZpbHRlciBzcGVjaWZpZXIgZm9yIGRlbHRhIGZpbHRlcgAAAAAAAABJbnZhbGlkIGZp
bHRlciBzcGVjaWZpZXIgZm9yIEJDSiBmaWx0ZXIARmlsdGVyIHNwZWNpZmllciBtdXN0IGJlIGEg
ZGljdCBvciBkaWN0LWxpa2Ugb2JqZWN0AGlkAABGaWx0ZXIgc3BlY2lmaWVyIG11c3QgaGF2ZSBh
biAiaWQiIGVudHJ5AEludmFsaWQgZmlsdGVyIElEOiAlbGx1AAAAAAAAAABUb28gbWFueSBmaWx0
ZXJzIC0gbGlibHptYSBzdXBwb3J0cyBhIG1heGltdW0gb2YgJWQAcyo6Y29tcHJlc3MAQ29tcHJl
c3NvciBoYXMgYmVlbiBmbHVzaGVkAFJlcGVhdGVkIGNhbGwgdG8gZmx1c2goKQAAAABJbnZhbGlk
IGZpbHRlciBjaGFpbiBmb3IgRk9STUFUX0FMT05FIC0gbXVzdCBiZSBhIHNpbmdsZSBMWk1BMSBm
aWx0ZXIAAABNdXN0IHNwZWNpZnkgZmlsdGVycyBmb3IgRk9STUFUX1JBVwB8aWlPTzpMWk1BQ29t
cHJlc3NvcgAAAAAAAAAASW50ZWdyaXR5IGNoZWNrcyBhcmUgb25seSBzdXBwb3J0ZWQgYnkgRk9S
TUFUX1haAAAAAAAAAABDYW5ub3Qgc3BlY2lmeSBib3RoIHByZXNldCBhbmQgZmlsdGVyIGNoYWlu
AFVuYWJsZSB0byBhbGxvY2F0ZSBsb2NrAEludmFsaWQgY29udGFpbmVyIGZvcm1hdDogJWQAY29t
cHJlc3MAZmx1c2gAX2x6bWEuTFpNQUNvbXByZXNzb3IAcyo6ZGVjb21wcmVzcwBBbHJlYWR5IGF0
IGVuZCBvZiBzdHJlYW0AfGlPTzpMWk1BRGVjb21wcmVzc29yAAAAAAAAAENhbm5vdCBzcGVjaWZ5
IG1lbW9yeSBsaW1pdCB3aXRoIEZPUk1BVF9SQVcAAAAAAENhbm5vdCBzcGVjaWZ5IGZpbHRlcnMg
ZXhjZXB0IHdpdGggRk9STUFUX1JBVwBkZWNvbXByZXNzAGNoZWNrAGVvZgB1bnVzZWRfZGF0YQBf
bHptYS5MWk1BRGVjb21wcmVzc29yAGk6aXNfY2hlY2tfc3VwcG9ydGVkAE86X2VuY29kZV9maWx0
ZXJfcHJvcGVydGllcwAATyZzKjpfZGVjb2RlX2ZpbHRlcl9wcm9wZXJ0aWVzAGlzX2NoZWNrX3N1
cHBvcnRlZABfZW5jb2RlX2ZpbHRlcl9wcm9wZXJ0aWVzAF9kZWNvZGVfZmlsdGVyX3Byb3BlcnRp
ZXMAX2x6bWEARk9STUFUX0FVVE8ARk9STUFUX1haAEZPUk1BVF9BTE9ORQBGT1JNQVRfUkFXAENI
RUNLX05PTkUAQ0hFQ0tfQ1JDMzIAQ0hFQ0tfQ1JDNjQAQ0hFQ0tfU0hBMjU2AENIRUNLX0lEX01B
WABDSEVDS19VTktOT1dOAEZJTFRFUl9MWk1BMQBGSUxURVJfTFpNQTIARklMVEVSX0RFTFRBAEZJ
TFRFUl9YODYARklMVEVSX0lBNjQARklMVEVSX0FSTQBGSUxURVJfQVJNVEhVTUIARklMVEVSX1NQ
QVJDAEZJTFRFUl9QT1dFUlBDAE1GX0hDMwBNRl9IQzQATUZfQlQyAE1GX0JUMwBNRl9CVDQATU9E
RV9GQVNUAE1PREVfTk9STUFMAFBSRVNFVF9ERUZBVUxUAFBSRVNFVF9FWFRSRU1FAENhbGwgdG8g
bGlibHptYSBmYWlsZWQuAF9sem1hLkxaTUFFcnJvcgBMWk1BRXJyb3IATFpNQUNvbXByZXNzb3IA
TFpNQURlY29tcHJlc3NvcgAAAAAAAF9QeVVuaWNvZGVfRnJvbUlkAGRpY3Rfc2l6ZQBsYwBscABw
YgBtb2RlAG5pY2VfbGVuAG1mAGRlcHRoAGRpc3QAc3RhcnRfb2Zmc2V0AGZvcm1hdABmaWx0ZXJz
AG1lbWxpbWl0AAAAARsDOywBAAAkAAAAKMb//0gBAAAoy///cAEAAEnM//+QAQAA1Mz//7ABAAAf
zf//0AEAAGrO///wAQAAr87//xACAABsz///MAIAAPzP//9QAgAAudD//3ACAAB20f//kAIAAMjT
//+4AgAAr9T//9gCAACL1f//+AIAAMrX//8YAwAAINj//zgDAACD2f//WAMAAAva//94AwAAPtz/
/5gDAAAd3v//uAMAAFTf///YAwAAJOD///gDAADv4P//GAQAAGzi//84BAAAKeP//1gEAAC95f//
eAQAABbm//+YBAAA1Oj//7gEAAAK6v//2AQAAJrq///4BAAAve7//xgFAAB37///OAUAAOjv//9Y
BQAAPfH//3gFAAAt8v//mAUAALvy//+4BQAAAAAAABQAAAAAAAAAAXpSAAF4EAEbDAcIkAEAACQA
AAAcAAAA2MT//wAEAAAADhBGDhhKDwt3CIAAPxo7KjMkIgAAAAAcAAAARAAAALDJ//8hAQAAAEEO
EIYCQw0GAxwBDAcIABwAAABkAAAAscr//4sAAAAAQQ4QhgJDDQYChgwHCAAAHAAAAIQAAAAcy///
SwAAAABBDhCGAkMNBgJGDAcIAAAcAAAApAAAAEfL//9LAQAAAEEOEIYCQw0GA0YBDAcIABwAAADE
AAAAcsz//0UAAAAAQQ4QhgJDDQYCQAwHCAAAHAAAAOQAAACXzP//vQAAAABBDhCGAkMNBgK4DAcI
AAAcAAAABAEAADTN//+QAAAAAEEOEIYCQw0GAosMBwgAABwAAAAkAQAApM3//70AAAAAQQ4QhgJD
DQYCuAwHCAAAHAAAAEQBAABBzv//vQAAAABBDhCGAkMNBgK4DAcIAAAkAAAAZAEAAN7O//9SAgAA
AEEOEIYCQw0GSY0DjASDBQNEAgwHCAAAHAAAAIwBAAAI0f//5wAAAABBDhCGAkMNBgLiDAcIAAAc
AAAArAEAAM/R///cAAAAAEEOEIYCQw0GAtcMBwgAABwAAADMAQAAi9L//z8CAAAAQQ4QhgJDDQYD
OgIMBwgAHAAAAOwBAACq1P//VgAAAABBDhCGAkMNBgJRDAcIAAAcAAAADAIAAODU//9jAQAAAEEO
EIYCQw0GA14BDAcIABwAAAAsAgAAI9b//4gAAAAAQQ4QhgJDDQYCgwwHCAAAHAAAAEwCAACL1v//
MwIAAABBDhCGAkMNBgMuAgwHCAAcAAAAbAIAAJ7Y///fAQAAAEEOEIYCQw0GA9oBDAcIABwAAACM
AgAAXdr//zcBAAAAQQ4QhgJDDQYDMgEMBwgAHAAAAKwCAAB02///0AAAAABBDhCGAkMNBgLLDAcI
AAAcAAAAzAIAACTc///LAAAAAEEOEIYCQw0GAsYMBwgAABwAAADsAgAAz9z//30BAAAAQQ4QhgJD
DQYDeAEMBwgAHAAAAAwDAAAs3v//vQAAAABBDhCGAkMNBgK4DAcIAAAcAAAALAMAAMne//+UAgAA
AEEOEIYCQw0GA48CDAcIABwAAABMAwAAPeH//1kAAAAAQQ4QhgJDDQYCVAwHCAAAHAAAAGwDAAB2
4f//vgIAAABBDhCGAkMNBgO5AgwHCAAcAAAAjAMAABTk//82AQAAAEEOEIYCQw0GAzEBDAcIABwA
AACsAwAAKuX//5AAAAAAQQ4QhgJDDQYCiwwHCAAAHAAAAMwDAACa5f//IwQAAABBDhCGAkMNBgMe
BAwHCAAcAAAA7AMAAJ3p//+6AAAAAEEOEIYCQw0GArUMBwgAABwAAAAMBAAAN+r//3EAAAAAQQ4Q
hgJDDQYCbAwHCAAAHAAAACwEAACI6v//VQEAAABBDhCGAkMNBgNQAQwHCAAcAAAATAQAAL3r///w
AAAAAEEOEIYCQw0GAusMBwgAABwAAABsBAAAjez//44AAAAAQQ4QhgJDDQYCiQwHCAAAHAAAAIwE
AAD77P//5AQAAABBDhCGAkMNBgPfBAwHCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAMCMAAAAAAADwIgAAAAAAAAAAAAAAAAAAAQAAAAAAAAB1BQAAAAAAAAEAAAAA
AAAAggUAAAAAAAABAAAAAAAAAJYFAAAAAAAAAQAAAAAAAACmBQAAAAAAAAwAAAAAAAAAQB4AAAAA
AAANAAAAAAAAANhPAAAAAAAAGQAAAAAAAACYbSAAAAAAABsAAAAAAAAACAAAAAAAAAAaAAAAAAAA
AKBtIAAAAAAAHAAAAAAAAAAIAAAAAAAAAPX+/28AAAAAyAEAAAAAAAAFAAAAAAAAABAKAAAAAAAA
BgAAAAAAAABIAgAAAAAAAAoAAAAAAAAA2QUAAAAAAAALAAAAAAAAABgAAAAAAAAAAwAAAAAAAAAA
cCAAAAAAAAIAAAAAAAAA6AUAAAAAAAAUAAAAAAAAAAcAAAAAAAAAFwAAAAAAAABYGAAAAAAAAAcA
AAAAAAAAwBAAAAAAAAAIAAAAAAAAAJgHAAAAAAAACQAAAAAAAAAYAAAAAAAAAP7//28AAAAAkBAA
AAAAAAD///9vAAAAAAEAAAAAAAAA8P//bwAAAADqDwAAAAAAAPn//28AAAAAQwAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ALBtIAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYeAAAAAAAAhh4AAAAAAACWHgAAAAAAAKYeAAAAAAAA
th4AAAAAAADGHgAAAAAAANYeAAAAAAAA5h4AAAAAAAD2HgAAAAAAAAYfAAAAAAAAFh8AAAAAAAAm
HwAAAAAAADYfAAAAAAAARh8AAAAAAABWHwAAAAAAAGYfAAAAAAAAdh8AAAAAAACGHwAAAAAAAJYf
AAAAAAAAph8AAAAAAAC2HwAAAAAAAMYfAAAAAAAA1h8AAAAAAADmHwAAAAAAAPYfAAAAAAAABiAA
AAAAAAAWIAAAAAAAACYgAAAAAAAANiAAAAAAAABGIAAAAAAAAFYgAAAAAAAAZiAAAAAAAAB2IAAA
AAAAAIYgAAAAAAAAliAAAAAAAACmIAAAAAAAALYgAAAAAAAAxiAAAAAAAADWIAAAAAAAAOYgAAAA
AAAA9iAAAAAAAAAGIQAAAAAAABYhAAAAAAAAJiEAAAAAAAA2IQAAAAAAAEYhAAAAAAAAViEAAAAA
AABmIQAAAAAAAHYhAAAAAAAAhiEAAAAAAACWIQAAAAAAAKYhAAAAAAAAtiEAAAAAAADGIQAAAAAA
ANYhAAAAAAAA5iEAAAAAAAD2IQAAAAAAAAYiAAAAAAAAFiIAAAAAAAAmIgAAAAAAADYiAAAAAAAA
RiIAAAAAAABWIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAEByIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAABjb21wcmVzcyhkYXRhKSAtPiBieXRlcwoKUHJvdmlkZSBkYXRhIHRvIHRo
ZSBjb21wcmVzc29yIG9iamVjdC4gUmV0dXJucyBhIGNodW5rIG9mCmNvbXByZXNzZWQgZGF0YSBp
ZiBwb3NzaWJsZSwgb3IgYiIiIG90aGVyd2lzZS4KCldoZW4geW91IGhhdmUgZmluaXNoZWQgcHJv
dmlkaW5nIGRhdGEgdG8gdGhlIGNvbXByZXNzb3IsIGNhbGwgdGhlCmZsdXNoKCkgbWV0aG9kIHRv
IGZpbmlzaCB0aGUgY29udmVyc2lvbiBwcm9jZXNzLgoAAAAAAAAAAAAAZmx1c2goKSAtPiBieXRl
cwoKRmluaXNoIHRoZSBjb21wcmVzc2lvbiBwcm9jZXNzLiBSZXR1cm5zIHRoZSBjb21wcmVzc2Vk
IGRhdGEgbGVmdAppbiBpbnRlcm5hbCBidWZmZXJzLgoKVGhlIGNvbXByZXNzb3Igb2JqZWN0IGNh
bm5vdCBiZSB1c2VkIGFmdGVyIHRoaXMgbWV0aG9kIGlzIGNhbGxlZC4KAAAAAAAAAAAAAAAAAAAA
AAAAAAAATFpNQUNvbXByZXNzb3IoZm9ybWF0PUZPUk1BVF9YWiwgY2hlY2s9LTEsIHByZXNldD1O
b25lLCBmaWx0ZXJzPU5vbmUpCgpDcmVhdGUgYSBjb21wcmVzc29yIG9iamVjdCBmb3IgY29tcHJl
c3NpbmcgZGF0YSBpbmNyZW1lbnRhbGx5LgoKZm9ybWF0IHNwZWNpZmllcyB0aGUgY29udGFpbmVy
IGZvcm1hdCB0byB1c2UgZm9yIHRoZSBvdXRwdXQuIFRoaXMgY2FuCmJlIEZPUk1BVF9YWiAoZGVm
YXVsdCksIEZPUk1BVF9BTE9ORSwgb3IgRk9STUFUX1JBVy4KCmNoZWNrIHNwZWNpZmllcyB0aGUg
aW50ZWdyaXR5IGNoZWNrIHRvIHVzZS4gRm9yIEZPUk1BVF9YWiwgdGhlIGRlZmF1bHQKaXMgQ0hF
Q0tfQ1JDNjQuIEZPUk1BVF9BTE9ORSBhbmQgRk9STUFUX1JBVyBkbyBub3Qgc3Vwb3J0IGludGVn
cml0eQpjaGVja3M7IGZvciB0aGVzZSBmb3JtYXRzLCBjaGVjayBtdXN0IGJlIG9taXR0ZWQsIG9y
IGJlIENIRUNLX05PTkUuCgpUaGUgc2V0dGluZ3MgdXNlZCBieSB0aGUgY29tcHJlc3NvciBjYW4g
YmUgc3BlY2lmaWVkIGVpdGhlciBhcyBhCnByZXNldCBjb21wcmVzc2lvbiBsZXZlbCAod2l0aCB0
aGUgJ3ByZXNldCcgYXJndW1lbnQpLCBvciBpbiBkZXRhaWwKYXMgYSBjdXN0b20gZmlsdGVyIGNo
YWluICh3aXRoIHRoZSAnZmlsdGVycycgYXJndW1lbnQpLiBGb3IgRk9STUFUX1haCmFuZCBGT1JN
QVRfQUxPTkUsIHRoZSBkZWZhdWx0IGlzIHRvIHVzZSB0aGUgUFJFU0VUX0RFRkFVTFQgcHJlc2V0
CmxldmVsLiBGb3IgRk9STUFUX1JBVywgdGhlIGNhbGxlciBtdXN0IGFsd2F5cyBzcGVjaWZ5IGEg
ZmlsdGVyIGNoYWluOwp0aGUgcmF3IGNvbXByZXNzb3IgZG9lcyBub3Qgc3VwcG9ydCBwcmVzZXQg
Y29tcHJlc3Npb24gbGV2ZWxzLgoKcHJlc2V0IChpZiBwcm92aWRlZCkgc2hvdWxkIGJlIGFuIGlu
dGVnZXIgaW4gdGhlIHJhbmdlIDAtOSwgb3B0aW9uYWxseQpPUi1lZCB3aXRoIHRoZSBjb25zdGFu
dCBQUkVTRVRfRVhUUkVNRS4KCmZpbHRlcnMgKGlmIHByb3ZpZGVkKSBzaG91bGQgYmUgYSBzZXF1
ZW5jZSBvZiBkaWN0cy4gRWFjaCBkaWN0IHNob3VsZApoYXZlIGFuIGVudHJ5IGZvciAiaWQiIGlu
ZGljYXRpbmcgdGhlIElEIG9mIHRoZSBmaWx0ZXIsIHBsdXMKYWRkaXRpb25hbCBlbnRyaWVzIGZv
ciBvcHRpb25zIHRvIHRoZSBmaWx0ZXIuCgpGb3Igb25lLXNob3QgY29tcHJlc3Npb24sIHVzZSB0
aGUgY29tcHJlc3MoKSBmdW5jdGlvbiBpbnN0ZWFkLgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZWNvbXByZXNzKGRhdGEpIC0+IGJ5dGVz
CgpQcm92aWRlIGRhdGEgdG8gdGhlIGRlY29tcHJlc3NvciBvYmplY3QuIFJldHVybnMgYSBjaHVu
ayBvZgpkZWNvbXByZXNzZWQgZGF0YSBpZiBwb3NzaWJsZSwgb3IgYiIiIG90aGVyd2lzZS4KCkF0
dGVtcHRpbmcgdG8gZGVjb21wcmVzcyBkYXRhIGFmdGVyIHRoZSBlbmQgb2YgdGhlIHN0cmVhbSBp
cwpyZWFjaGVkIHJhaXNlcyBhbiBFT0ZFcnJvci4gQW55IGRhdGEgZm91bmQgYWZ0ZXIgdGhlIGVu
ZCBvZiB0aGUKc3RyZWFtIGlzIGlnbm9yZWQsIGFuZCBzYXZlZCBpbiB0aGUgdW51c2VkX2RhdGEg
YXR0cmlidXRlLgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASUQgb2YgdGhlIGludGVn
cml0eSBjaGVjayB1c2VkIGJ5IHRoZSBpbnB1dCBzdHJlYW0uAAAAAAAAAAAAAAAAAFRydWUgaWYg
dGhlIGVuZC1vZi1zdHJlYW0gbWFya2VyIGhhcyBiZWVuIHJlYWNoZWQuAAAAAAAAAAAAAAAAAABE
YXRhIGZvdW5kIGFmdGVyIHRoZSBlbmQgb2YgdGhlIGNvbXByZXNzZWQgc3RyZWFtLgAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMWk1BRGVjb21wcmVzc29yKGZv
cm1hdD1GT1JNQVRfQVVUTywgbWVtbGltaXQ9Tm9uZSwgZmlsdGVycz1Ob25lKQoKQ3JlYXRlIGEg
ZGVjb21wcmVzc29yIG9iamVjdCBmb3IgZGVjb21wcmVzc2luZyBkYXRhIGluY3JlbWVudGFsbHku
Cgpmb3JtYXQgc3BlY2lmaWVzIHRoZSBjb250YWluZXIgZm9ybWF0IG9mIHRoZSBpbnB1dCBzdHJl
YW0uIElmIHRoaXMgaXMKRk9STUFUX0FVVE8gKHRoZSBkZWZhdWx0KSwgdGhlIGRlY29tcHJlc3Nv
ciB3aWxsIGF1dG9tYXRpY2FsbHkgZGV0ZWN0CndoZXRoZXIgdGhlIGlucHV0IGlzIEZPUk1BVF9Y
WiBvciBGT1JNQVRfQUxPTkUuIFN0cmVhbXMgY3JlYXRlZCB3aXRoCkZPUk1BVF9SQVcgY2Fubm90
IGJlIGF1dG9kZXRlY3RlZC4KCm1lbWxpbWl0IGNhbiBiZSBzcGVjaWZpZWQgdG8gbGltaXQgdGhl
IGFtb3VudCBvZiBtZW1vcnkgdXNlZCBieSB0aGUKZGVjb21wcmVzc29yLiBUaGlzIHdpbGwgY2F1
c2UgZGVjb21wcmVzc2lvbiB0byBmYWlsIGlmIHRoZSBpbnB1dApjYW5ub3QgYmUgZGVjb21wcmVz
c2VkIHdpdGhpbiB0aGUgZ2l2ZW4gbGltaXQuCgpmaWx0ZXJzIHNwZWNpZmllcyBhIGN1c3RvbSBm
aWx0ZXIgY2hhaW4uIFRoaXMgYXJndW1lbnQgaXMgcmVxdWlyZWQgZm9yCkZPUk1BVF9SQVcsIGFu
ZCBub3QgYWNjZXB0ZWQgd2l0aCBhbnkgb3RoZXIgZm9ybWF0LiBXaGVuIHByb3ZpZGVkLAp0aGlz
IHNob3VsZCBiZSBhIHNlcXVlbmNlIG9mIGRpY3RzLCBlYWNoIGluZGljYXRpbmcgdGhlIElEIGFu
ZCBvcHRpb25zCmZvciBhIHNpbmdsZSBmaWx0ZXIuCgpGb3Igb25lLXNob3QgZGVjb21wcmVzc2lv
biwgdXNlIHRoZSBkZWNvbXByZXNzKCkgZnVuY3Rpb24gaW5zdGVhZC4KAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGlzX2NoZWNrX3N1cHBvcnRlZChjaGVja19pZCkgLT4gYm9v
bAoKVGVzdCB3aGV0aGVyIHRoZSBnaXZlbiBpbnRlZ3JpdHkgY2hlY2sgaXMgc3VwcG9ydGVkLgoK
QWx3YXlzIHJldHVybnMgVHJ1ZSBmb3IgQ0hFQ0tfTk9ORSBhbmQgQ0hFQ0tfQ1JDMzIuCgAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF9lbmNvZGVfZmlsdGVy
X3Byb3BlcnRpZXMoZmlsdGVyKSAtPiBieXRlcwoKUmV0dXJuIGEgYnl0ZXMgb2JqZWN0IGVuY29k
aW5nIHRoZSBvcHRpb25zIChwcm9wZXJ0aWVzKSBvZiB0aGUgZmlsdGVyCnNwZWNpZmllZCBieSAq
ZmlsdGVyKiAoYSBkaWN0KS4KClRoZSByZXN1bHQgZG9lcyBub3QgaW5jbHVkZSB0aGUgZmlsdGVy
IElEIGl0c2VsZiwgb25seSB0aGUgb3B0aW9ucy4KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAABfZGVjb2RlX2ZpbHRlcl9wcm9wZXJ0aWVzKGZpbHRlcl9pZCwgZW5jb2Rl
ZF9wcm9wcykgLT4gZGljdAoKUmV0dXJuIGEgZGljdCBkZXNjcmliaW5nIGEgZmlsdGVyIHdpdGgg
SUQgKmZpbHRlcl9pZCosIGFuZCBvcHRpb25zCihwcm9wZXJ0aWVzKSBkZWNvZGVkIGZyb20gdGhl
IGJ5dGVzIG9iamVjdCAqZW5jb2RlZF9wcm9wcyouCgAAAACZVAAAAAAAAFU2AAAAAAAAAQAAAAAA
AACAciAAAAAAAKJUAAAAAAAAjDcAAAAAAAAEAAAAAAAAAIBzIAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF5VAAAAAAAA
DEEAAAAAAAABAAAAAAAAAEB5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABp
VQAAAAAAAAEAAAAAAAAAmAAAAAAAAAABAAAAAAAAAKB6IAAAAAAAb1UAAAAAAAAOAAAAAAAAAJwA
AAAAAAAAAQAAAAAAAADgeiAAAAAAAHNVAAAAAAAAEAAAAAAAAACgAAAAAAAAAAEAAAAAAAAAIHsg
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAADnVQAAAAAAAK9HAAAAAAAAAQAAAAAAAAAAfyAAAAAAAPpVAAAA
AAAAIEgAAAAAAAABAAAAAAAAAMB/IAAAAAAAFFYAAAAAAAB1SQAAAAAAAAEAAAAAAAAAwIAgAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALRSAAAAAAAAs1EAAAAAAADiVwAAAAAA
AOxXAAAAAAAA71cAAAAAAADyVwAAAAAAAPVXAAAAAAAA+lcAAAAAAAADWAAAAAAAAAZYAAAAAAAA
AAAAAAAAAAAAAAAAAAAAALRSAAAAAAAADFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtFIAAAAAAAAR
WAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALRSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA7FcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADvVwAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAPJXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4lcAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAADiVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxYAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEVgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHlgAAAAA
AABpVQAAAAAAALNRAAAAAAAAJVgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AB5YAAAAAAAALVgAAAAAAAAlWAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
qFQAAAAAAACoAAAAAAAAAAAAAAAAAAAA9T0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6wECAAAAAABAdCAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICBIAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhOwAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH9VAAAAAAAA
sAAAAAAAAAAAAAAAAAAAAPVGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOsBAgAAAAAAgHsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgiAAAAAAAECCIAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0kIAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAR0NDOiAoR2VudG9vIDQuOS4zIHAxLjMsIHBpZS0wLjYuMykgNC45
LjMAAC5zeW10YWIALnN0cnRhYgAuc2hzdHJ0YWIALmdudS5oYXNoAC5keW5zeW0ALmR5bnN0cgAu
Z251LnZlcnNpb24ALmdudS52ZXJzaW9uX3IALnJlbGEuZHluAC5yZWxhLnBsdAAuaW5pdAAudGV4
dAAuZmluaQAucm9kYXRhAC5laF9mcmFtZV9oZHIALmVoX2ZyYW1lAC5pbml0X2FycmF5AC5maW5p
X2FycmF5AC5qY3IALmR5bmFtaWMALmdvdAAuZ290LnBsdAAuZGF0YQAuYnNzAC5jb21tZW50AAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwABAMgBAAAAAAAAAAAAAAAAAAAAAAAA
AwACAEgCAAAAAAAAAAAAAAAAAAAAAAAAAwADABAKAAAAAAAAAAAAAAAAAAAAAAAAAwAEAOoPAAAA
AAAAAAAAAAAAAAAAAAAAAwAFAJAQAAAAAAAAAAAAAAAAAAAAAAAAAwAGAMAQAAAAAAAAAAAAAAAA
AAAAAAAAAwAHAFgYAAAAAAAAAAAAAAAAAAAAAAAAAwAIAEAeAAAAAAAAAAAAAAAAAAAAAAAAAwAJ
AGAeAAAAAAAAAAAAAAAAAAAAAAAAAwAKAGAiAAAAAAAAAAAAAAAAAAAAAAAAAwALANhPAAAAAAAA
AAAAAAAAAAAAAAAAAwAMAPBPAAAAAAAAAAAAAAAAAAAAAAAAAwANADhYAAAAAAAAAAAAAAAAAAAA
AAAAAwAOAGhZAAAAAAAAAAAAAAAAAAAAAAAAAwAPAJhtIAAAAAAAAAAAAAAAAAAAAAAAAwAQAKBt
IAAAAAAAAAAAAAAAAAAAAAAAAwARAKhtIAAAAAAAAAAAAAAAAAAAAAAAAwASALBtIAAAAAAAAAAA
AAAAAAAAAAAAAwATAKBvIAAAAAAAAAAAAAAAAAAAAAAAAwAUAABwIAAAAAAAAAAAAAAAAAAAAAAA
AwAVAEByIAAAAAAAAAAAAAAAAAAAAAAAAwAWAMiIIAAAAAAAAAAAAAAAAAAAAAAAAwAXAAAAAAAA
AAAAAAAAAAAAAAABAAAABADx/wAAAAAAAAAAAAAAAAAAAAAPAAAAAQAWANCIIAAAAAAACAAAAAAA
AAAeAAAAAQAMANBXAAAAAAAAEgAAAAAAAAA3AAAAAQAWANiIIAAAAAAACAAAAAAAAAA9AAAAAQAW
AOCIIAAAAAAACAAAAAAAAABJAAAAAgAKAFclAAAAAAAASwEAAAAAAABaAAAAAgAKAKImAAAAAAAA
RQAAAAAAAABmAAAAAgAKAOcmAAAAAAAAvQAAAAAAAAB3AAAAAgAKAKQnAAAAAAAAkAAAAAAAAACK
AAAAAgAKADQoAAAAAAAAvQAAAAAAAACeAAAAAgAKAPEoAAAAAAAAvQAAAAAAAACwAAAAAgAKAK4p
AAAAAAAAUgIAAAAAAADHAAAAAQAVAICDIAAAAAAAWAAAAAAAAADWAAAAAgAKAAAsAAAAAAAA5wAA
AAAAAADuAAAAAQAVAOCDIAAAAAAAGAAAAAAAAAD9AAAAAgAKAOcsAAAAAAAA3AAAAAAAAAATAQAA
AQAVAACEIAAAAAAAGAAAAAAAAAAiAQAAAgAKAMMtAAAAAAAAPwIAAAAAAAA0AQAAAgAKAAIwAAAA
AAAAVgAAAAAAAABGAQAAAgAKAFgwAAAAAAAAYwEAAAAAAABeAQAAAgAKALsxAAAAAAAAiAAAAAAA
AABtAQAAAgAKAEMyAAAAAAAAMwIAAAAAAAB/AQAAAQAVACCEIAAAAAAAGAAAAAAAAACNAQAAAQAV
AECEIAAAAAAAGAAAAAAAAACbAQAAAQAVAGCEIAAAAAAAGAAAAAAAAACpAQAAAQAVAICEIAAAAAAA
GAAAAAAAAAC3AQAAAQAVAKCEIAAAAAAAGAAAAAAAAADMAQAAAQAVAMCEIAAAAAAAGAAAAAAAAADh
AQAAAQAVAOCEIAAAAAAAGAAAAAAAAADxAQAAAQAVAACFIAAAAAAAGAAAAAAAAAAJAgAAAgAKAHY0
AAAAAAAA3wEAAAAAAAASAgAAAQAVAIByIAAAAAAA9wAAAAAAAAAqAgAAAgAKAFU2AAAAAAAANwEA
AAAAAAA+AgAAAQAVAIBzIAAAAAAArAAAAAAAAABTAgAAAgAKAIw3AAAAAAAA0AAAAAAAAABkAgAA
AgAKAFw4AAAAAAAAywAAAAAAAAB3AgAAAgAKACc5AAAAAAAAfQEAAAAAAACNAgAAAgAKAKQ6AAAA
AAAAvQAAAAAAAAChAgAAAgAKAGE7AAAAAAAAlAIAAAAAAACxAgAAAQAVACCFIAAAAAAAKAAAAAAA
AADBAgAAAgAKAPU9AAAAAAAAWQAAAAAAAADUAgAAAQAVAICBIAAAAAAAYAAAAAAAAADnAgAAAQAV
AEB0IAAAAAAAyAQAAAAAAAD2AgAAAQAVAICFIAAAAAAAiAEAAAAAAAAGAwAAAgAKAE4+AAAAAAAA
vgIAAAAAAAARAwAAAQAVAEB5IAAAAAAAQgEAAAAAAAAtAwAAAgAKAAxBAAAAAAAANgEAAAAAAABF
AwAAAgAKAEJCAAAAAAAAkAAAAAAAAABbAwAAAgAKANJCAAAAAAAAIwQAAAAAAABtAwAAAQAVAGCF
IAAAAAAAIAAAAAAAAAB9AwAAAgAKAPVGAAAAAAAAugAAAAAAAACSAwAAAQAVAACCIAAAAAAAQAAA
AAAAAACnAwAAAQAVAKB6IAAAAAAANAAAAAAAAAC+AwAAAQAVAOB6IAAAAAAAMwAAAAAAAADTAwAA
AQAVACB7IAAAAAAAMwAAAAAAAADwAwAAAQAVAECCIAAAAAAAoAAAAAAAAAAFBAAAAQAVAIB7IAAA
AAAAXAMAAAAAAAAWBAAAAQAVAECHIAAAAAAAiAEAAAAAAAAoBAAAAQAVAAB/IAAAAAAAkQAAAAAA
AAA/BAAAAgAKAK9HAAAAAAAAcQAAAAAAAABSBAAAAQAVAMB/IAAAAAAA2AAAAAAAAABwBAAAAgAK
ACBIAAAAAAAAVQEAAAAAAACKBAAAAQAVAMCAIAAAAAAAvQAAAAAAAACoBAAAAgAKAHVJAAAAAAAA
8AAAAAAAAADCBAAAAQAVAACDIAAAAAAAgAAAAAAAAADRBAAAAgAKAGVKAAAAAAAAjgAAAAAAAADp
BAAAAQAVAEByIAAAAAAAAAAAAAAAAAAAAAAABADx/wAAAAAAAAAAAAAAAAAAAAD2BAAAAQASALBt
IAAAAAAAAAAAAAAAAAD/BAAAAQAVAMiIIAAAAAAAAAAAAAAAAAALBQAAAQAUAABwIAAAAAAAAAAA
AAAAAAAhBQAAEgAAAAAAAAAAAAAAAAAAAAAAAAAzBQAAEgAAAAAAAAAAAAAAAAAAAAAAAABOBQAA
EgAAAAAAAAAAAAAAAAAAAAAAAABjBQAAEgAAAAAAAAAAAAAAAAAAAAAAAAB1BQAAEgAAAAAAAAAA
AAAAAAAAAAAAAACNBQAAEgAAAAAAAAAAAAAAAAAAAAAAAAClBQAAEgAAAAAAAAAAAAAAAAAAAAAA
AAC5BQAAIAAAAAAAAAAAAAAAAAAAAAAAAADVBQAAEgAAAAAAAAAAAAAAAAAAAAAAAADlBQAAEgAA
AAAAAAAAAAAAAAAAAAAAAADyBQAAEgAAAAAAAAAAAAAAAAAAAAAAAAADBgAAEgAAAAAAAAAAAAAA
AAAAAAAAAAAYBgAAEgAAAAAAAAAAAAAAAAAAAAAAAAAjBgAAEgAAAAAAAAAAAAAAAAAAAAAAAAA/
BgAAEgAAAAAAAAAAAAAAAAAAAAAAAABQBgAAEgAAAAAAAAAAAAAAAAAAAAAAAABqBgAAEgAAAAAA
AAAAAAAAAAAAAAAAAAB8BgAAEgAAAAAAAAAAAAAAAAAAAAAAAACTBgAAEgAAAAAAAAAAAAAAAAAA
AAAAAACkBgAAEAAVAMiIIAAAAAAAAAAAAAAAAACrBgAAEgAKAPNKAAAAAAAA5AQAAAAAAAC1BgAA
EgAAAAAAAAAAAAAAAAAAAAAAAADEBgAAEgAKAGAjAAAAAAAAIQEAAAAAAADeBgAAEgAAAAAAAAAA
AAAAAAAAAAAAAAD0BgAAEgALANhPAAAAAAAAAAAAAAAAAAD6BgAAEgAAAAAAAAAAAAAAAAAAAAAA
AAAWBwAAEQAAAAAAAAAAAAAAAAAAAAAAAAAoBwAAEgAAAAAAAAAAAAAAAAAAAAAAAAA4BwAAEgAA
AAAAAAAAAAAAAAAAAAAAAABLBwAAEgAAAAAAAAAAAAAAAAAAAAAAAABjBwAAEQAAAAAAAAAAAAAA
AAAAAAAAAAB0BwAAEQAAAAAAAAAAAAAAAAAAAAAAAACEBwAAEgAAAAAAAAAAAAAAAAAAAAAAAACW
BwAAEgAAAAAAAAAAAAAAAAAAAAAAAACxBwAAEgAAAAAAAAAAAAAAAAAAAAAAAADFBwAAEgAKAIEk
AAAAAAAAiwAAAAAAAADXBwAAEgAAAAAAAAAAAAAAAAAAAAAAAADuBwAAEgAAAAAAAAAAAAAAAAAA
AAAAAAABCAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAYCAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAlCAAA
EgAAAAAAAAAAAAAAAAAAAAAAAAA1CAAAEgAAAAAAAAAAAAAAAAAAAAAAAABICAAAEgAAAAAAAAAA
AAAAAAAAAAAAAABUCAAAEgAAAAAAAAAAAAAAAAAAAAAAAABkCAAAEQAAAAAAAAAAAAAAAAAAAAAA
AABzCAAAIAAAAAAAAAAAAAAAAAAAAAAAAACCCAAAEgAAAAAAAAAAAAAAAAAAAAAAAACOCAAAEQAA
AAAAAAAAAAAAAAAAAAAAAACiCAAAEgAAAAAAAAAAAAAAAAAAAAAAAACxCAAAEQAAAAAAAAAAAAAA
AAAAAAAAAADACAAAEgAAAAAAAAAAAAAAAAAAAAAAAADJCAAAEgAAAAAAAAAAAAAAAAAAAAAAAADh
CAAAEgAAAAAAAAAAAAAAAAAAAAAAAADwCAAAEQAAAAAAAAAAAAAAAAAAAAAAAAD/CAAAEAAWAOiI
IAAAAAAAAAAAAAAAAAAECQAAEgAAAAAAAAAAAAAAAAAAAAAAAAAZCQAAEgAAAAAAAAAAAAAAAAAA
AAAAAAAwCQAAEgAAAAAAAAAAAAAAAAAAAAAAAABTCQAAEgAAAAAAAAAAAAAAAAAAAAAAAABpCQAA
EAAWAMiIIAAAAAAAAAAAAAAAAAB1CQAAEgAAAAAAAAAAAAAAAAAAAAAAAACGCQAAEgAAAAAAAAAA
AAAAAAAAAAAAAACRCQAAEgAAAAAAAAAAAAAAAAAAAAAAAACoCQAAEgAAAAAAAAAAAAAAAAAAAAAA
AAC7CQAAEgAAAAAAAAAAAAAAAAAAAAAAAADMCQAAEgAAAAAAAAAAAAAAAAAAAAAAAADeCQAAEgAA
AAAAAAAAAAAAAAAAAAAAAADxCQAAIAAAAAAAAAAAAAAAAAAAAAAAAAAFCgAAEgAAAAAAAAAAAAAA
AAAAAAAAAAAUCgAAEgAAAAAAAAAAAAAAAAAAAAAAAAAmCgAAEgAAAAAAAAAAAAAAAAAAAAAAAAA6
CgAAEgAAAAAAAAAAAAAAAAAAAAAAAABECgAAEgAAAAAAAAAAAAAAAAAAAAAAAABRCgAAIAAAAAAA
AAAAAAAAAAAAAAAAAABrCgAAEgAAAAAAAAAAAAAAAAAAAAAAAAB/CgAAEgAAAAAAAAAAAAAAAAAA
AAAAAACYCgAAEgAAAAAAAAAAAAAAAAAAAAAAAAClCgAAIgAAAAAAAAAAAAAAAAAAAAAAAADBCgAA
EgAIAEAeAAAAAAAAAAAAAAAAAADHCgAAEgAAAAAAAAAAAAAAAAAAAAAAAADaCgAAEgAKAAwlAAAA
AAAASwAAAAAAAAAAX2x6bWFtb2R1bGUuYwBzdGF0aWNfc3RyaW5ncwBfX1BSRVRUWV9GVU5DVElP
Tl9fLjk1NDAARXJyb3IAZW1wdHlfdHVwbGUAY2F0Y2hfbHptYV9lcnJvcgBncm93X2J1ZmZlcgB1
aW50MzJfY29udmVydGVyAGx6bWFfdmxpX2NvbnZlcnRlcgBsem1hX21vZGVfY29udmVydGVyAGx6
bWFfbWZfY29udmVydGVyAHBhcnNlX2ZpbHRlcl9zcGVjX2x6bWEAb3B0bmFtZXMuMTAxNTYAcGFy
c2VfZmlsdGVyX3NwZWNfZGVsdGEAb3B0bmFtZXMuMTAxNjUAcGFyc2VfZmlsdGVyX3NwZWNfYmNq
AG9wdG5hbWVzLjEwMTcyAHBhcnNlX2ZpbHRlcl9zcGVjAGZyZWVfZmlsdGVyX2NoYWluAHBhcnNl
X2ZpbHRlcl9jaGFpbl9zcGVjAHNwZWNfYWRkX2ZpZWxkAGJ1aWxkX2ZpbHRlcl9zcGVjAFB5SWRf
aWQuMTAyMjAAUHlJZF9sYy4xMDIyNABQeUlkX2xwLjEwMjI1AFB5SWRfcGIuMTAyMjYAUHlJZF9k
aWN0X3NpemUuMTAyMjcAUHlJZF9kaWN0X3NpemUuMTAyMzEAUHlJZF9kaXN0LjEwMjM0AFB5SWRf
c3RhcnRfb2Zmc2V0LjEwMjQyAGNvbXByZXNzAENvbXByZXNzb3JfY29tcHJlc3NfZG9jAENvbXBy
ZXNzb3JfY29tcHJlc3MAQ29tcHJlc3Nvcl9mbHVzaF9kb2MAQ29tcHJlc3Nvcl9mbHVzaABDb21w
cmVzc29yX2luaXRfeHoAQ29tcHJlc3Nvcl9pbml0X2Fsb25lAENvbXByZXNzb3JfaW5pdF9yYXcA
Q29tcHJlc3Nvcl9pbml0AGFyZ19uYW1lcy4xMDI5OQBDb21wcmVzc29yX2RlYWxsb2MAQ29tcHJl
c3Nvcl9tZXRob2RzAENvbXByZXNzb3JfZG9jAENvbXByZXNzb3JfdHlwZQBkZWNvbXByZXNzAERl
Y29tcHJlc3Nvcl9kZWNvbXByZXNzX2RvYwBEZWNvbXByZXNzb3JfZGVjb21wcmVzcwBEZWNvbXBy
ZXNzb3JfaW5pdF9yYXcARGVjb21wcmVzc29yX2luaXQAYXJnX25hbWVzLjEwMzQ4AERlY29tcHJl
c3Nvcl9kZWFsbG9jAERlY29tcHJlc3Nvcl9tZXRob2RzAERlY29tcHJlc3Nvcl9jaGVja19kb2MA
RGVjb21wcmVzc29yX2VvZl9kb2MARGVjb21wcmVzc29yX3VudXNlZF9kYXRhX2RvYwBEZWNvbXBy
ZXNzb3JfbWVtYmVycwBEZWNvbXByZXNzb3JfZG9jAERlY29tcHJlc3Nvcl90eXBlAGlzX2NoZWNr
X3N1cHBvcnRlZF9kb2MAaXNfY2hlY2tfc3VwcG9ydGVkAF9lbmNvZGVfZmlsdGVyX3Byb3BlcnRp
ZXNfZG9jAF9lbmNvZGVfZmlsdGVyX3Byb3BlcnRpZXMAX2RlY29kZV9maWx0ZXJfcHJvcGVydGll
c19kb2MAX2RlY29kZV9maWx0ZXJfcHJvcGVydGllcwBtb2R1bGVfbWV0aG9kcwBtb2R1bGVfYWRk
X2ludF9jb25zdGFudABfX2Rzb19oYW5kbGUAX0RZTkFNSUMAX19UTUNfRU5EX18AX0dMT0JBTF9P
RkZTRVRfVEFCTEVfAGx6bWFfZWFzeV9lbmNvZGVyAFB5U3RyaW5nX0Zyb21TdHJpbmdBbmRTaXpl
AFB5RGljdF9TZXRJdGVtU3RyaW5nAGZyZWVAQEdMSUJDXzIuMi41AGx6bWFfY2hlY2tfaXNfc3Vw
cG9ydGVkAFB5TW9kdWxlX0FkZEludENvbnN0YW50AGx6bWFfc3RyZWFtX2RlY29kZXIAX0lUTV9k
ZXJlZ2lzdGVyVE1DbG9uZVRhYmxlAFB5TWFwcGluZ19DaGVjawBQeUludF9Bc0xvbmcAX1B5U3Ry
aW5nX1Jlc2l6ZQBQeUV2YWxfUmVzdG9yZVRocmVhZABQeU1lbV9GcmVlAFB5TG9uZ19Gcm9tVW5z
aWduZWRMb25nTG9uZwBQeUJ1ZmZlcl9SZWxlYXNlAFB5TG9uZ19Bc1Vuc2lnbmVkTG9uZ0xvbmcA
UHlfSW5pdE1vZHVsZTRfNjQAUHlTdHJpbmdfSW50ZXJuSW5QbGFjZQBsem1hX3Jhd19lbmNvZGVy
AF9lZGF0YQBpbml0X2x6bWEAUHlFcnJfTm9NZW1vcnkAUHlFcnJfTmV3RXhjZXB0aW9uV2l0aERv
YwBQeVRocmVhZF9hY3F1aXJlX2xvY2sAX2ZpbmkAX19zdGFja19jaGtfZmFpbEBAR0xJQkNfMi40
AFB5RXhjX01lbW9yeUVycm9yAFB5RXJyX1NldFN0cmluZwBsem1hX2Fsb25lX2VuY29kZXIAUHlN
YXBwaW5nX0dldEl0ZW1TdHJpbmcAUHlFeGNfVmFsdWVFcnJvcgBQeUV4Y19UeXBlRXJyb3IAUHlU
eXBlX0dlbmVyaWNOZXcAX19hc3NlcnRfZmFpbEBAR0xJQkNfMi4yLjUAbWVtc2V0QEBHTElCQ18y
LjIuNQBfUHlVbmljb2RlX0Zyb21JZABQeUVycl9FeGNlcHRpb25NYXRjaGVzAFB5U2VxdWVuY2Vf
R2V0SXRlbQBsem1hX3Byb3BlcnRpZXNfZGVjb2RlAFB5VHlwZV9SZWFkeQBQeVNlcXVlbmNlX1Np
emUAUHlFcnJfTmV3RXhjZXB0aW9uAFB5RXJyX0NsZWFyAFB5Qm9vbF9Gcm9tTG9uZwBQeUV4Y19L
ZXlFcnJvcgBfX2dtb25fc3RhcnRfXwBQeVR1cGxlX05ldwBQeUV4Y19PdmVyZmxvd0Vycm9yAFB5
RXJyX09jY3VycmVkAFB5RXhjX0VPRkVycm9yAGx6bWFfZW5kAF9QeUFyZ19QYXJzZVR1cGxlX1Np
emVUAGx6bWFfZ2V0X2NoZWNrAF9QeV9Ob25lU3RydWN0AF9lbmQAbHptYV9wcm9wZXJ0aWVzX3Np
emUAUHlUaHJlYWRfYWxsb2NhdGVfbG9jawBfUHlBcmdfUGFyc2VUdXBsZUFuZEtleXdvcmRzX1Np
emVUAFB5VGhyZWFkX3JlbGVhc2VfbG9jawBfX2Jzc19zdGFydABsem1hX3Jhd19kZWNvZGVyAFB5
RGljdF9OZXcAbHptYV9wcm9wZXJ0aWVzX2VuY29kZQBsem1hX2Fsb25lX2RlY29kZXIAbHptYV9s
em1hX3ByZXNldABQeUV2YWxfU2F2ZVRocmVhZABQeU1vZHVsZV9BZGRPYmplY3QAX0p2X1JlZ2lz
dGVyQ2xhc3NlcwBQeURpY3RfU2V0SXRlbQBsem1hX2F1dG9fZGVjb2RlcgBsem1hX3N0cmVhbV9l
bmNvZGVyAGx6bWFfY29kZQBQeUVycl9Gb3JtYXQAX0lUTV9yZWdpc3RlclRNQ2xvbmVUYWJsZQBQ
eUxvbmdfRnJvbUxvbmdMb25nAFB5VW5pY29kZVVDUzRfRnJvbVN0cmluZwBQeU1lbV9NYWxsb2MA
X19jeGFfZmluYWxpemVAQEdMSUJDXzIuMi41AF9pbml0AFB5VGhyZWFkX2ZyZWVfbG9jawBfUHlE
aWN0X1NldEl0ZW1JZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsAAAD2//9vAgAAAAAAAADIAQAAAAAAAMgBAAAAAAAA
gAAAAAAAAAACAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAlAAAACwAAAAIAAAAAAAAASAIAAAAAAABI
AgAAAAAAAMgHAAAAAAAAAwAAAAIAAAAIAAAAAAAAABgAAAAAAAAALQAAAAMAAAACAAAAAAAAABAK
AAAAAAAAEAoAAAAAAADZBQAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAADUAAAD///9vAgAA
AAAAAADqDwAAAAAAAOoPAAAAAAAApgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAABCAAAA
/v//bwIAAAAAAAAAkBAAAAAAAACQEAAAAAAAADAAAAAAAAAAAwAAAAEAAAAIAAAAAAAAAAAAAAAA
AAAAUQAAAAQAAAACAAAAAAAAAMAQAAAAAAAAwBAAAAAAAACYBwAAAAAAAAIAAAAAAAAACAAAAAAA
AAAYAAAAAAAAAFsAAAAEAAAAQgAAAAAAAABYGAAAAAAAAFgYAAAAAAAA6AUAAAAAAAACAAAACQAA
AAgAAAAAAAAAGAAAAAAAAABlAAAAAQAAAAYAAAAAAAAAQB4AAAAAAABAHgAAAAAAABoAAAAAAAAA
AAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAYAAAAAEAAAAGAAAAAAAAAGAeAAAAAAAAYB4AAAAAAAAA
BAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAGsAAAABAAAABgAAAAAAAABgIgAAAAAAAGAi
AAAAAAAAdy0AAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABxAAAAAQAAAAYAAAAAAAAA2E8A
AAAAAADYTwAAAAAAAAkAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAdwAAAAEAAAACAAAA
AAAAAPBPAAAAAAAA8E8AAAAAAABGCAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAH8AAAAB
AAAAAgAAAAAAAAA4WAAAAAAAADhYAAAAAAAALAEAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAA
AACNAAAAAQAAAAIAAAAAAAAAaFkAAAAAAABoWQAAAAAAAKwEAAAAAAAAAAAAAAAAAAAIAAAAAAAA
AAAAAAAAAAAAlwAAAA4AAAADAAAAAAAAAJhtIAAAAAAAmG0AAAAAAAAIAAAAAAAAAAAAAAAAAAAA
CAAAAAAAAAAAAAAAAAAAAKMAAAAPAAAAAwAAAAAAAACgbSAAAAAAAKBtAAAAAAAACAAAAAAAAAAA
AAAAAAAAAAgAAAAAAAAAAAAAAAAAAACvAAAAAQAAAAMAAAAAAAAAqG0gAAAAAACobQAAAAAAAAgA
AAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAtAAAAAYAAAADAAAAAAAAALBtIAAAAAAAsG0A
AAAAAADwAQAAAAAAAAMAAAAAAAAACAAAAAAAAAAQAAAAAAAAAL0AAAABAAAAAwAAAAAAAACgbyAA
AAAAAKBvAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAAADCAAAAAQAAAAMAAAAA
AAAAAHAgAAAAAAAAcAAAAAAAABACAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAywAAAAEA
AAADAAAAAAAAAEByIAAAAAAAQHIAAAAAAACIFgAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAA
ANEAAAAIAAAAAwAAAAAAAADIiCAAAAAAAMiIAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAA
AAAAAAAAAADWAAAAAQAAADAAAAAAAAAAAAAAAAAAAADIiAAAAAAAACoAAAAAAAAAAAAAAAAAAAAB
AAAAAAAAAAEAAAAAAAAAEQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAA8ogAAAAAAADfAAAAAAAAAAAA
AAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAAAAAAAAAAAAAAAAAAAAANiJAAAAAAAAgBAA
AAAAAAAaAAAAXwAAAAgAAAAAAAAAGAAAAAAAAAAJAAAAAwAAAAAAAAAAAAAAAAAAAAAAAABYmgAA
AAAAAOwKAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA''','xlzma':u'"""Interface to the liblzma compression library.\n\nThis module provides a class for reading and writing compressed files,\nclasses for incremental (de)compression, and convenience functions for\none-shot (de)compression.\n\nThese classes and functions support both the XZ and legacy LZMA\ncontainer formats, as well as raw compressed data streams.\n"""\n\n__all__ = [\n    "CHECK_NONE", "CHECK_CRC32", "CHECK_CRC64", "CHECK_SHA256",\n    "CHECK_ID_MAX", "CHECK_UNKNOWN",\n    "FILTER_LZMA1", "FILTER_LZMA2", "FILTER_DELTA", "FILTER_X86", "FILTER_IA64",\n    "FILTER_ARM", "FILTER_ARMTHUMB", "FILTER_POWERPC", "FILTER_SPARC",\n    "FORMAT_AUTO", "FORMAT_XZ", "FORMAT_ALONE", "FORMAT_RAW",\n    "MF_HC3", "MF_HC4", "MF_BT2", "MF_BT3", "MF_BT4",\n    "MODE_FAST", "MODE_NORMAL", "PRESET_DEFAULT", "PRESET_EXTREME",\n\n    "LZMACompressor", "LZMADecompressor", "LZMAFile", "LZMAError",\n    "open", "compress", "decompress", "is_check_supported",\n]\n\nimport io\nfrom ._lzma import *\nfrom ._lzma import _encode_filter_properties, _decode_filter_properties\n\n\n_MODE_CLOSED   = 0\n_MODE_READ     = 1\n_MODE_READ_EOF = 2\n_MODE_WRITE    = 3\n\n_BUFFER_SIZE = 8192\n\n\n__version__ = "0.0.3"\n\nclass LZMAFile(io.BufferedIOBase):\n\n    """A file object providing transparent LZMA (de)compression.\n\n    An LZMAFile can act as a wrapper for an existing file object, or\n    refer directly to a named file on disk.\n\n    Note that LZMAFile provides a *binary* file interface - data read\n    is returned as bytes, and data to be written must be given as bytes.\n    """\n\n    def __init__(self, filename=None, mode="r",\n                 format=None, check=-1, preset=None, filters=None):\n        """Open an LZMA-compressed file in binary mode.\n\n        filename can be either an actual file name (given as a str, unicode\n        or bytes object), in which case the named file is opened, or it can\n        be an existing file object to read from or write to.\n\n        mode can be "r" for reading (default), "w" for (over)writing, or\n        "a" for appending. These can equivalently be given as "rb", "wb",\n        and "ab" respectively.\n\n        format specifies the container format to use for the file.\n        If mode is "r", this defaults to FORMAT_AUTO. Otherwise, the\n        default is FORMAT_XZ.\n\n        check specifies the integrity check to use. This argument can\n        only be used when opening a file for writing. For FORMAT_XZ,\n        the default is CHECK_CRC64. FORMAT_ALONE and FORMAT_RAW do not\n        support integrity checks - for these formats, check must be\n        omitted, or be CHECK_NONE.\n\n        When opening a file for reading, the *preset* argument is not\n        meaningful, and should be omitted. The *filters* argument should\n        also be omitted, except when format is FORMAT_RAW (in which case\n        it is required).\n\n        When opening a file for writing, the settings used by the\n        compressor can be specified either as a preset compression\n        level (with the *preset* argument), or in detail as a custom\n        filter chain (with the *filters* argument). For FORMAT_XZ and\n        FORMAT_ALONE, the default is to use the PRESET_DEFAULT preset\n        level. For FORMAT_RAW, the caller must always specify a filter\n        chain; the raw compressor does not support preset compression\n        levels.\n\n        preset (if provided) should be an integer in the range 0-9,\n        optionally OR-ed with the constant PRESET_EXTREME.\n\n        filters (if provided) should be a sequence of dicts. Each dict\n        should have an entry for "id" indicating ID of the filter, plus\n        additional entries for options to the filter.\n        """\n        self._fp = None\n        self._closefp = False\n        self._mode = _MODE_CLOSED\n        self._pos = 0\n        self._size = -1\n\n        if mode in ("r", "rb"):\n            if check != -1:\n                raise ValueError("Cannot specify an integrity check "\n                                 "when opening a file for reading")\n            if preset is not None:\n                raise ValueError("Cannot specify a preset compression "\n                                 "level when opening a file for reading")\n            if format is None:\n                format = FORMAT_AUTO\n            mode_code = _MODE_READ\n            # Save the args to pass to the LZMADecompressor initializer.\n            # If the file contains multiple compressed streams, each\n            # stream will need a separate decompressor object.\n            self._init_args = {"format":format, "filters":filters}\n            self._decompressor = LZMADecompressor(**self._init_args)\n            self._buffer = None\n        elif mode in ("w", "wb", "a", "ab"):\n            if format is None:\n                format = FORMAT_XZ\n            mode_code = _MODE_WRITE\n            self._compressor = LZMACompressor(format=format, check=check,\n                                              preset=preset, filters=filters)\n        else:\n            raise ValueError("Invalid mode: {!r}".format(mode))\n\n        if hasattr(filename, "read") or hasattr(filename, "write"):\n            self._fp = filename\n            self._mode = mode_code\n        else:\n            if "b" not in mode:\n                mode += "b"\n            self._fp = io.open(filename, mode)\n            self._closefp = True\n            self._mode = mode_code\n\n    def close(self):\n        """Flush and close the file.\n\n        May be called more than once without error. Once the file is\n        closed, any other operation on it will raise a ValueError.\n        """\n        if self._mode == _MODE_CLOSED:\n            return\n        try:\n            if self._mode in (_MODE_READ, _MODE_READ_EOF):\n                self._decompressor = None\n                self._buffer = None\n            elif self._mode == _MODE_WRITE:\n                self._fp.write(self._compressor.flush())\n                self._compressor = None\n        finally:\n            try:\n                if self._closefp:\n                    self._fp.close()\n            finally:\n                self._fp = None\n                self._closefp = False\n                self._mode = _MODE_CLOSED\n\n    @property\n    def closed(self):\n        """True if this file is closed."""\n        return self._mode == _MODE_CLOSED\n\n    def fileno(self):\n        """Return the file descriptor for the underlying file."""\n        self._check_not_closed()\n        return self._fp.fileno()\n\n    def seekable(self):\n        """Return whether the file supports seeking."""\n        return self.readable() and self._fp.seekable()\n\n    def readable(self):\n        """Return whether the file was opened for reading."""\n        self._check_not_closed()\n        return self._mode in (_MODE_READ, _MODE_READ_EOF)\n\n    def writable(self):\n        """Return whether the file was opened for writing."""\n        self._check_not_closed()\n        return self._mode == _MODE_WRITE\n\n    # Mode-checking helper functions.\n\n    def _check_not_closed(self):\n        if self.closed:\n            raise ValueError("I/O operation on closed file")\n\n    def _check_can_read(self):\n        if not self.readable():\n            raise io.UnsupportedOperation("File not open for reading")\n\n    def _check_can_write(self):\n        if not self.writable():\n            raise io.UnsupportedOperation("File not open for writing")\n\n    def _check_can_seek(self):\n        if not self.readable():\n            raise io.UnsupportedOperation("Seeking is only supported "\n                                          "on files open for reading")\n        if not self._fp.seekable():\n            raise io.UnsupportedOperation("The underlying file object "\n                                          "does not support seeking")\n\n    # Fill the readahead buffer if it is empty. Returns False on EOF.\n    def _fill_buffer(self):\n        # Depending on the input data, our call to the decompressor may not\n        # return any data. In this case, try again after reading another block.\n        while True:\n            if self._buffer:\n                return True\n\n            if self._decompressor.unused_data:\n                rawblock = self._decompressor.unused_data\n            else:\n                rawblock = self._fp.read(_BUFFER_SIZE)\n\n            if not rawblock:\n                if self._decompressor.eof:\n                    self._mode = _MODE_READ_EOF\n                    self._size = self._pos\n                    return False\n                else:\n                    raise EOFError("Compressed file ended before the "\n                                   "end-of-stream marker was reached")\n\n            # Continue to next stream.\n            if self._decompressor.eof:\n                self._decompressor = LZMADecompressor(**self._init_args)\n\n            self._buffer = self._decompressor.decompress(rawblock)\n\n    # Read data until EOF.\n    # If return_data is false, consume the data without returning it.\n    def _read_all(self, return_data=True):\n        blocks = []\n        while self._fill_buffer():\n            if return_data:\n                blocks.append(self._buffer)\n            self._pos += len(self._buffer)\n            self._buffer = None\n        if return_data:\n            return b"".join(blocks)\n\n    # Read a block of up to n bytes.\n    # If return_data is false, consume the data without returning it.\n    def _read_block(self, n, return_data=True):\n        blocks = []\n        while n > 0 and self._fill_buffer():\n            if n < len(self._buffer):\n                data = self._buffer[:n]\n                self._buffer = self._buffer[n:]\n            else:\n                data = self._buffer\n                self._buffer = None\n            if return_data:\n                blocks.append(data)\n            self._pos += len(data)\n            n -= len(data)\n        if return_data:\n            return b"".join(blocks)\n\n    def peek(self, size=-1):\n        """Return buffered data without advancing the file position.\n\n        Always returns at least one byte of data, unless at EOF.\n        The exact number of bytes returned is unspecified.\n        """\n        self._check_can_read()\n        if self._mode == _MODE_READ_EOF or not self._fill_buffer():\n            return b""\n        return self._buffer\n\n    def read(self, size=-1):\n        """Read up to size uncompressed bytes from the file.\n\n        If size is negative or omitted, read until EOF is reached.\n        Returns b"" if the file is already at EOF.\n        """\n        self._check_can_read()\n        if size is None:\n            #This is not needed on Python 3 where the comparison to zeo\n            #will fail with a TypeError.\n            raise TypeError("Read size should be an integer, not None")\n        if self._mode == _MODE_READ_EOF or size == 0:\n            return b""\n        elif size < 0:\n            return self._read_all()\n        else:\n            return self._read_block(size)\n\n    def read1(self, size=-1):\n        """Read up to size uncompressed bytes, while trying to avoid\n        making multiple reads from the underlying stream.\n\n        Returns b"" if the file is at EOF.\n        """\n        # Usually, read1() calls _fp.read() at most once. However, sometimes\n        # this does not give enough data for the decompressor to make progress.\n        # In this case we make multiple reads, to avoid returning b"".\n        self._check_can_read()\n        if size is None:\n            #This is not needed on Python 3 where the comparison to zero\n            #will fail with a TypeError. \n            raise TypeError("Read size should be an integer, not None")\n        if (size == 0 or self._mode == _MODE_READ_EOF or\n            not self._fill_buffer()):\n            return b""\n        if 0 < size < len(self._buffer):\n            data = self._buffer[:size]\n            self._buffer = self._buffer[size:]\n        else:\n            data = self._buffer\n            self._buffer = None\n        self._pos += len(data)\n        return data\n\n    def write(self, data):\n        """Write a bytes object to the file.\n\n        Returns the number of uncompressed bytes written, which is\n        always len(data). Note that due to buffering, the file on disk\n        may not reflect the data written until close() is called.\n        """\n        self._check_can_write()\n        compressed = self._compressor.compress(data)\n        self._fp.write(compressed)\n        self._pos += len(data)\n        return len(data)\n\n    # Rewind the file to the beginning of the data stream.\n    def _rewind(self):\n        self._fp.seek(0, 0)\n        self._mode = _MODE_READ\n        self._pos = 0\n        self._decompressor = LZMADecompressor(**self._init_args)\n        self._buffer = None\n\n    def seek(self, offset, whence=0):\n        """Change the file position.\n\n        The new position is specified by offset, relative to the\n        position indicated by whence. Possible values for whence are:\n\n            0: start of stream (default): offset must not be negative\n            1: current stream position\n            2: end of stream; offset must not be positive\n\n        Returns the new file position.\n\n        Note that seeking is emulated, sp depending on the parameters,\n        this operation may be extremely slow.\n        """\n        self._check_can_seek()\n\n        # Recalculate offset as an absolute file position.\n        if whence == 0:\n            pass\n        elif whence == 1:\n            offset = self._pos + offset\n        elif whence == 2:\n            # Seeking relative to EOF - we need to know the file\'s size.\n            if self._size < 0:\n                self._read_all(return_data=False)\n            offset = self._size + offset\n        else:\n            raise ValueError("Invalid value for whence: {}".format(whence))\n\n        # Make it so that offset is the number of bytes to skip forward.\n        if offset is None:\n            #This is not needed on Python 3 where the comparison to self._pos\n            #will fail with a TypeError.\n            raise TypeError("Seek offset should be an integer, not None")\n        if offset < self._pos:\n            self._rewind()\n        else:\n            offset -= self._pos\n\n        # Read and discard data until we reach the desired position.\n        if self._mode != _MODE_READ_EOF:\n            self._read_block(offset, return_data=False)\n\n        return self._pos\n\n    def tell(self):\n        """Return the current file position."""\n        self._check_not_closed()\n        return self._pos\n\n\ndef open(filename, mode="rb",\n         format=None, check=-1, preset=None, filters=None,\n         encoding=None, errors=None, newline=None):\n    """Open an LZMA-compressed file in binary or text mode.\n\n    filename can be either an actual file name (given as a str or bytes object),\n    in which case the named file is opened, or it can be an existing file object\n    to read from or write to.\n\n    The mode argument can be "r", "rb" (default), "w", "wb", "a", or "ab" for\n    binary mode, or "rt", "wt" or "at" for text mode.\n\n    The format, check, preset and filters arguments specify the compression\n    settings, as for LZMACompressor, LZMADecompressor and LZMAFile.\n\n    For binary mode, this function is equivalent to the LZMAFile constructor:\n    LZMAFile(filename, mode, ...). In this case, the encoding, errors and\n    newline arguments must not be provided.\n\n    For text mode, a LZMAFile object is created, and wrapped in an\n    io.TextIOWrapper instance with the specified encoding, error handling\n    behavior, and line ending(s).\n\n    """\n    if "t" in mode:\n        if "b" in mode:\n            raise ValueError("Invalid mode: %r" % (mode,))\n    else:\n        if encoding is not None:\n            raise ValueError("Argument \'encoding\' not supported in binary mode")\n        if errors is not None:\n            raise ValueError("Argument \'errors\' not supported in binary mode")\n        if newline is not None:\n            raise ValueError("Argument \'newline\' not supported in binary mode")\n\n    lz_mode = mode.replace("t", "")\n    binary_file = LZMAFile(filename, lz_mode, format=format, check=check,\n                           preset=preset, filters=filters)\n\n    if "t" in mode:\n        return io.TextIOWrapper(binary_file, encoding, errors, newline)\n    else:\n        return binary_file\n\n\ndef compress(data, format=FORMAT_XZ, check=-1, preset=None, filters=None):\n    """Compress a block of data.\n\n    Refer to LZMACompressor\'s docstring for a description of the\n    optional arguments *format*, *check*, *preset* and *filters*.\n\n    For incremental compression, use an LZMACompressor object instead.\n    """\n    comp = LZMACompressor(format, check, preset, filters)\n    return comp.compress(data) + comp.flush()\n\n\ndef decompress(data, format=FORMAT_AUTO, memlimit=None, filters=None):\n    """Decompress a block of data.\n\n    Refer to LZMADecompressor\'s docstring for a description of the\n    optional arguments *format*, *check* and *filters*.\n\n    For incremental decompression, use a LZMADecompressor object instead.\n    """\n    results = []\n    while True:\n        decomp = LZMADecompressor(format, memlimit, filters)\n        results.append(decomp.decompress(data))\n        if not decomp.eof:\n            raise LZMAError("Compressed data ended before the "\n                            "end-of-stream marker was reached")\n        if not decomp.unused_data:\n            return b"".join(results)\n        # There is unused data left over. Proceed to next stream.\n        data = decomp.unused_data\n'}

if args.compressor == "lzma":
    try:
        import lzma
        sys.stderr.write("Imported lzma module (python3.4 standard lib)\n")
    except ImportError as e:
        try:
            import backports.lzma as lzma
            sys.stderr.write("Imported backports.lzma module (python2.7 additional lib)\n")
        except ImportError as ee:
            try:
                ###deviation content %2###
                ###import code intended to run on ~python2.7 only###
                import imp
                
                # from http://stackoverflow.com/questions/14191900/pythonimport-module-from-memory
                # and slightly modified to get it working...
                class StringImporter(object):
                    def __init__(self, modules):
                        self._modules = dict(modules)
                    def find_module(self, fullname, path):
                        if fullname in self._modules.keys():
                            return self
                        return None
                    def load_module(self, fullname):
                        if not fullname in self._modules.keys():
                            raise ImportError(fullname)
                        if fullname == "xlzma._lzma":
                            pointer = base64decode(self._modules[fullname].encode('utf8'))
                            with open('/tmp/_pypack_hyeneticsXpy27XbackportsX_lzma.so','wb') as f:
                                f.write(pointer)
                                f.flush()
                            mod = imp.load_dynamic('_lzma','/tmp/_pypack_hyeneticsXpy27XbackportsX_lzma.so')
                            sys.modules[fullname] = mod
                            return mod
                        new_module = imp.new_module(fullname)
                        new_module.__package__={'xlzma':'xlzma'}[fullname]
                        new_module.__path__ = ['.']
                        sys.modules[fullname] = new_module
                        pointer = self._modules[fullname]
                        try:
                            exec(pointer,new_module.__dict__)
                            return new_module
                        except Exception as e:
                            del sys.modules[fullname]
                            raise e
                
                if __name__ == '__main__': sys.meta_path.append(StringImporter(pkmodules))
                import xlzma as lzma
                if not lzma.decompress(lzma.compress(b'test')) == b'test':
                    raise ImportError('lzma seems broken')
                sys.stderr.write("Imported fallback xlzma module (backports.lzma + _lzma.so included in this script)\n")
            
            except Exception as eee:
                sys.stderr.write('lzma import failed + backports.lzma import failed + import packaged version of backports.lzma failed. cannot go forward\n')
                exit()
    compressor = lambda f: lzma.compress(f,format=lzma.FORMAT_ALONE)
    decompressor = lambda f: lzma.decompress(f,format=lzma.FORMAT_ALONE)
else:
    sys.stderr.write('selected compressor not yet implemented\n')
    exit()

## integrity hashing function check ##
if integrity:
    try:
        test=''
        validhash = '8c29e7314efa15dcdac06db9ca7d67f42b93034c65bb43a87afc4dd20225580eabc7f9099e740928f9e388eee4d05c2c573c3902a2c7b27701fc0b6e8f469985'
        hashname = 'hashlib.sha512'
        import hashlib
        hashgen = {'hashlib.sha512':hashlib.sha512}[hashname] #or less secure eval(hashname) ... hmm?
        test = hashgen(b'sanity check').hexdigest()
        if test != validhash:
            raise ImportError('%s != %s : %s disfunction' % (test,validhash,hashname))
        hashmap = {}
    except Exception as e:
        integrity = False
        sys.stderr.write('hashlib or sha512 function lookup triggered an error\n')
        sys.stderr.write('disabling hash generation and unpacker verification\n')
    finally:
        del test

try:
    if not headerpath.startswith('/dev/fd'):
        hfilepath = os.path.realpath(headerpath)
    else:
        hfilepath = headerpath
    sys.stderr.write("packing header file: %s\n" % hfilepath)
    with open(hfilepath,mode='rb') as hfile:
        header = hfile.read().decode('utf8')
        header = repr(header)
except Exception as e:
    print('')
    print('halt: %s : %s' % (e.__class__,e))
    exit()

package = {}
anons = 0

def findkeys(keyindexed,value):
    return list(filter(lambda x: keyindexed[x] is value,keyindexed))

class ephemeral(object):
    def __init__(self,content):
        self.content = content
    def __enter__(self):
        return self
    def __call__(self):
        return self.content
    def __exit__(self,*excinfos):
        self.content = None
        del self.content
        suicide = findkeys(globals(),self)
        any(map(lambda k: globals().__delitem__(k),suicide))

def factorpack(pfilepath,pfilekey,pfiledata,pkmodule=False):
    if integrity:
        rawchksum = hashgen(pfiledata()).hexdigest()
        sys.stderr.write("i-- %s : %s = %s \n" % (pfilepath,hashname,rawchksum))
    with ephemeral(compressor(pfiledata())) as lzmacompressed:
        pfiledata.__exit__()
        sys.stderr.write("**- %s : file data variable reference deleted\n" % pfilepath)
        sys.stderr.write("**- %s : LZMA compressed string is %s bytes length\n" % (pfilepath,len(lzmacompressed())))
        with ephemeral(base64encode(lzmacompressed())) as b64encoded:
            lzmacompressed.__exit__()
            sys.stderr.write("*** %s : lzma data variable reference deleted\n" % pfilepath)
            sys.stderr.write("*** %s : base64 encoded string is %s bytes length\n" % (pfilepath,len(b64encoded())))
            if integrity:
                b64chksum = hashgen(b64encoded().strip()).hexdigest()
                sys.stderr.write("**i %s : %s = %s \n" % (pfilepath,hashname,b64chksum))
                hashmap[pfilekey] = (repr(rawchksum),repr(b64chksum))
            if not pkmodule:
                package[pfilekey] = repr(b64encoded().decode('utf8').strip())
            else:
                pkmodules[pfilekey] = repr(b64encoded().decode('utf8').strip())

#...facepalm...
#idea was good for any other modules
#but not LZMA failsafe lib... compressed with LZMA
try:
    pkmods = list(pkmodules.keys())
    vpkmods = set(pkmods).intersection(modstopack)
    for pkmodule in pkmods:
        if not pkmodule in vpkmods:
            sys.stderr.write("skipping module file %s\n" % pkmodule)
            del pkmodules[pkmodule]
            continue            
        if pkmodule in ['xlzma._lzma','xlzma']:
            sys.stderr.write("packing backports.lzma part %s ... unfortunatly, obviously not LZMA compressible\n" % pkmodule)
            pkmodules[repr(pkmodule)] = repr(pkmodules[pkmodule])
            del pkmodules[pkmodule]
            if integrity:
                if pkmodule == 'xlzma._lzma':
                    rawchksum = hashgen(base64decode(pkmodules[repr(pkmodule)].encode('utf8'))).hexdigest()
                else:
                    rawchksum = hashgen(pkmodules[repr(pkmodule)].encode('utf8')).hexdigest()
                sys.stderr.write("i-- %s : %s = %s \n" % (pkmodule,hashname,rawchksum))
                if pkmodule == 'xlzma._lzma':
                    b64chksum = hashgen(pkmodules[repr(pkmodule)].encode('utf8').strip()).hexdigest()
                else:
                    b64chksum = hashgen(base64encode(pkmodules[repr(pkmodule)].encode('utf8').strip())).hexdigest()
                sys.stderr.write("**i %s : %s = %s \n" % (pkmodule,hashname,b64chksum))
                hashmap[repr(pkmodule)] = (repr(rawchksum),repr(b64chksum))            
            continue
        pfilekey = repr(pkmodule)
        pfilepath = 'python module %s' % pkmodule
        sys.stderr.write("packing additional %s\n" % pfilepath)
        #if pkmodule == 'xlzma._lzma':
        #    pfiledata = ephemeral(base64decode(pkmodules['xlzma._lzma'].encode('utf8')))
        #
        #else:
        pfiledata = ephemeral(pkmodules[pkmodule].encode('utf8'))
        sys.stderr.write("*-- %s : %s bytes read \n" % (pfilepath,len(pfiledata())))
        del pkmodules[pkmodule]
        factorpack(pfilepath,pfilekey,pfiledata,pkmodule=True)
except Exception as e:
        sys.stderr.write('\n')
        sys.stderr.write('halt: %s : %s\n' % (e.__class__,e))
        exit()

pkmodulesstring = ''
if integrity: hashstring1 = ""
pkmoduleskeys = list(pkmodules.keys())
while len(pkmoduleskeys) > 0:
    if pkmodulesstring != '':
        pkmodulesstring += ','
    key = pkmoduleskeys.pop()
    pkmodulesstring += "%s:%s" % (key,pkmodules[key])
    if integrity:
        if hashstring1 != "":
            hashstring1 += ","
        hashstring1 += "%s:[%s,%s]" % (key,hashmap[key][0],hashmap[key][1])
del pkmodules
sys.stderr.write("additional python libraries overhead: %s bytes\n" % len(pkmodulesstring.encode('utf8')))

for pfile in args.packedfiles:
    pfile = pfile.strip()
    try:
        if not pfile.startswith('/dev/fd'):
            pfilepath = os.path.realpath(pfile)
            pfilekey = repr(os.path.basename(pfilepath))
        else:
            pfilepath = pfile
            pfilekey = repr("anonfile" + str(anons))
            anons += 1
        sys.stderr.write("packing payload file: %s\n" % pfilepath)
        with open(pfilepath,mode='rb') as pfile:
            pfiledata = ephemeral(pfile.read())
            sys.stderr.write("*-- %s : %s bytes read \n" % (pfilepath,len(pfiledata())))
        factorpack(pfilepath,pfilekey,pfiledata,pkmodule=False)
    except Exception as e:
        sys.stderr.write('\n')
        sys.stderr.write('halt: %s : %s\n' % (e.__class__,e))
        exit()

packagestring = ""
if integrity: hashstring2 = ""
lenpackage = len(package)
while lenpackage > 0:
    packed = package.popitem()
    lenpackage = len(package)
    if packagestring != "":
        packagestring += ","
    packagestring += "%s:%s" % (packed[0],packed[1])
    if integrity:
        if hashstring2 != "":
            hashstring2 += ","
        hashstring2 += "%s:[%s,%s]" % (packed[0],hashmap[packed[0]][0],hashmap[packed[0]][1])
if integrity: hashstring = hashstring1+(hashstring1 != '' and ',' or '')+hashstring2

pytemplate = '''#!/usr/bin/python

# python package with automatic unpack script

header = %s

package = {%s}

~HASH0~

pkmodules = {%s}

import sys

import base64
import os

if hasattr(base64,"decodestring"):
    base64decode = base64.decodestring
elif hasattr(base64,"decodebytes"):
    base64decode = base64.decodebytes
else:
    sys.stderr.write("base64 module has neither decodestring or decodebytes function, aborting\\n")
    exit()

try:
    import lzma
    sys.stderr.write("Imported lzma module (python3.4 standard lib)\\n")
except ImportError as e:
    try:
        import backports.lzma as lzma
        sys.stderr.write("Imported backports.lzma module (python2.7 additional lib)\\n")
    except ImportError as ee:
        try:
            import imp
            
            class StringImporter(object):
                def __init__(self, modules):
                    self._modules = dict(modules)
                def find_module(self, fullname, path):
                    if fullname in self._modules.keys():
                        return self
                    return None
                def load_module(self, fullname):
                    if not fullname in self._modules.keys():
                        raise ImportError(fullname)
                    if fullname == "xlzma._lzma":
                        pointer = base64decode(self._modules[fullname].encode('utf8'))
                        with open('/tmp/_pypack_hyeneticsXpy27XbackportsX_lzma.so','wb') as f:
                            f.write(pointer)
                            f.flush()
                        mod = imp.load_dynamic('_lzma','/tmp/_pypack_hyeneticsXpy27XbackportsX_lzma.so')
                        sys.modules[fullname] = mod
                        return mod
                    new_module = imp.new_module(fullname)
                    new_module.__package__={'xlzma':'xlzma'}[fullname]
                    new_module.__path__ = ['.']
                    sys.modules[fullname] = new_module
                    pointer = self._modules[fullname]
                    try:
                        exec(pointer,new_module.__dict__)
                        return new_module
                    except Exception as e:
                        del sys.modules[fullname]
                        raise e
            
            if __name__ == '__main__': sys.meta_path.append(StringImporter(pkmodules))
            import xlzma as lzma
            if not lzma.decompress(lzma.compress(b'test')) == b'test':
                raise ImportError('lzma seems broken')
            sys.stderr.write("Imported fallback xlzma module (backports.lzma + _lzma.so included in this script)\\n")
        
        except Exception as eee:
            sys.stderr.write(repr(eee)+"\\n")
            sys.stderr.write('lzma import failed + backports.lzma import failed + import packaged version of backports.lzma failed. cannot go forward\\n')
            exit()
            
del pkmodules

~HASH1~

def unpack(filename):
    try:
        package[filename] = package[filename].encode('utf8')
        package[filename] = lzma.decompress(base64decode(package[filename]),format=lzma.FORMAT_ALONE)
        ~HASH4~
    except Exception as e:
        sys.stderr.write('Error %%s : %%s\\n' %% (e.__class__,e))
        return False
    return True

~HASH2~

~HASH3~

if len(sys.argv) == 1:
    sys.stderr.write(header)
    sys.stderr.write('\\n\\n---\\n')
    sys.stderr.write('to unpack one of these files enter :\\n')
    for pfile in package.keys():
        sys.stderr.write(' |  %%s  %%s\\n' %% (sys.argv[0], pfile))
    sys.stderr.write(' | or \\n')
    sys.stderr.write(' | %%s unpack all \\n' %% (sys.argv[0]))
    sys.stderr.write(' |    to unpack every files in %%s%%s if no file with\\n' %% (os.getcwd(),os.sep))
    sys.stderr.write(' |    identical name already exists.\\n')
    sys.stderr.write(' |    (please remove them or move them before)\\n')
    exit()
else:
    if sys.argv[1] == 'unpack' and sys.argv[2] == 'all':
        fnames = list(package.keys())
        basedir = str(os.getcwd()) + str(os.sep)
        colide = list(filter(lambda fn: os.path.lexists(basedir+str(fn)),fnames))
        nc = True
        if any(colide):
            for fn in colide:
                sys.stderr.write(' [!] file %%s exists \\n' %% fn)
            sys.stderr.write(' --- please remove them or rename them to unpack in this directory\\n')
            nc = False
            exit()
        if nc:
            for fname in fnames:
                fpath = basedir+str(fname)
                if not os.path.lexists(fpath):
                    try:
                        with open(fpath,mode='wb') as fd:
                            if not unpack(fname):
                                raise RuntimeError('unpack failed for %%s\\n' %% fname)
                            else:
                                fd.write(package[fname])
                                fd.flush()
                                sys.stderr.write(' * unpacked %%s (length %%s bytes)\\n' %% (fpath,len(package[fname])))
                    except Exception as e:
                        sys.stderr.write('Error %%s : %%s\\n' %% (e.__class__,e))
                        exit()
                else:
                    sys.stderr.write('that should not be happening, but... %%s exists\\n' %% fpath)
                    exit()
        else:
            sys.stderr.write('this line should never be executed, but some files already exists\\n')
            exit()
    elif sys.argv[1] in list(package.keys()):
        if unpack(sys.argv[1]):
            if not sys.stdout.isatty():
                stdout = sys.stdout.fileno()
                os.write(stdout,package[sys.argv[1]])
            else:
                sys.stderr.write('stdout is a tty, utf8 output\\n\\n')
                sys.stdout.write(package[sys.argv[1]].decode('utf8'))
        else:
            sys.stderr.write('unpack failed for %%s\\n' %% sys.argv[1])
        exit()
    else:
        sys.stderr.write(header)
        sys.stderr.write('\\n\\n---\\n')
        sys.stderr.write('file: %%s not inside\\n' %% sys.argv[1])
        sys.stderr.write(' * \\n')
        sys.stderr.write('to unpack one of these files enter :\\n')
        for pfile in package.keys():
            sys.stderr.write(' |  %%s  %%s\\n' %% (sys.argv[0], pfile))
        exit()
''' 

if integrity:
    chksumtp = lambda m: {'~HASH0~':'hashmap={%s}' % hashstring,
                          '~HASH1~':'''integrity = False
try:
    test=''
    validhash = '%s'
    hashname = '%s'
    import hashlib
    hashgen = %s
    test = hashgen(b'sanity check').hexdigest()
    if test != validhash:
        raise ImportError('%%s != %%s : %%s disfunction' %% (test,validhash,hashname))
    integrity = True
except Exception as e:
    sys.stderr.write('hashlib or %s function lookup triggered an error\\n')
    sys.stderr.write('disabling hash verification\\n')
finally:
    del test
    del validhash
''' % (validhash,hashname,hashname,hashname),
                          '~HASH2~':'if integrity:\n    hashverif=lambda d,h: hashgen(d).hexdigest() == h',
                          '~HASH3~':'''if integrity:
    packages = list(package.keys())
    for pfile in packages:
        b64hsh=hashmap[pfile][1]
        if not hashverif(package[pfile].encode('utf8'),b64hsh):
            sys.stderr.write('base64 string hash verification failed for %s : ignoring this file\\n' % pfile)
            del package[pfile]

''',
                          '~HASH4~':'''if integrity:
            rawhsh=hashmap[filename][0]
            if not hashverif(package[filename],rawhsh):
                sys.stderr.write('data hash verification failed for %s : unpacking failure!\\n' % filename)
                return False'''}[m.group()]
else:
    chksumtp = lambda m: ''

outfile = pytemplate % (header,packagestring,pkmodulesstring)
outfile = re.sub("~HASH[0-9]+~",chksumtp,outfile)

print(outfile)
